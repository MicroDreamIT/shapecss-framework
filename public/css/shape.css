/*!
 * ShapeCss 2.0.3
 * Copyright 2016-2017 Shahanur Sharif.
 * http://microdreamit.com
 * Licensed under MIT (https://github.com/MicroDreamIT/Shapecss/blob/master/LICENSE)
 */

@font-face {
  font-family: 'shapecss';
  src: url(../fonts/RobotoSlab-Light.ttf?79754934891c17dd798ca5e7eb5fa9a9) format("truetype");
}

@font-face {
  font-family: 'shapecss-regular';
  src: url(../fonts/RobotoSlab-Regular.ttf?1ec06eed11bbcb1ee510b8f3522adea8) format("truetype");
}

.progress-bar {
  background: rgba(236, 236, 236, 0.6);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
}

.progress-bar-info-stripe {
  background: repeating-linear-gradient(45deg, #5BC0DE, #5BC0DE 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  animation-name: popup_text;
  animation-duration: 2s;
}

.progress-bar-success-stripe {
  background: repeating-linear-gradient(45deg, #5CB85C, #5CB85C 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  animation-name: popup_text;
  animation-duration: 2s;
}

.progress-bar-primary-stripe {
  background: repeating-linear-gradient(45deg, #337AB7, #337AB7 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  animation-name: popup_text;
  animation-duration: 2s;
}

.progress-bar-warning-stripe {
  background: repeating-linear-gradient(45deg, #F0AD4E, #F0AD4E 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  animation-name: popup_text;
  animation-duration: 2s;
}

.progress-bar-danger-stripe {
  background: repeating-linear-gradient(45deg, #D9534F, #D9534F 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  animation-name: popup_text;
  animation-duration: 2s;
}

.progress-bar-default-stripe {
  background: repeating-linear-gradient(45deg, #dedede, #dedede 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  animation-name: popup_text;
  animation-duration: 2s;
}

* {
  padding: 0;
  margin: 0;
}

html,
body {
  width: 100%;
  height: 100%;
  text-rendering: optimizeLegibility;
  text-rendering: geometricPrecision;
  font-smooth: always;
  font-smoothing: antialiased;
  -moz-font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;
}

body {
  font-family: 'shapecss';
}

strong {
  font-weight: 700;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  font-family: 'shapecss-regular';
}

body,
p {
  font-weight: 300;
  font-size: 0.9375rem;
}

ul,
li {
  padding: 0;
  margin: 0;
}

a {
  text-decoration: none;
  cursor: pointer;
}

hr {
  border-color: rgba(255, 255, 255, 0.29);
  margin: 2rem 0;
}

button {
  background: transparent;
  border: 0.0625rem solid #dedede;
  cursor: pointer;
}

p {
  line-height: 1.6;
  padding: 0.125rem 0;
  margin: 0;
}

footer {
  display: -ms-flexbox;
  display: flex;
}

.pagination {
  display: -ms-flexbox;
  display: flex;
  padding-left: 0;
  margin: 1.25rem 0;
  border-radius: 0.25rem;
}

.pagination.right {
  display: -ms-flexbox;
  display: flex;
  float: none;
  -ms-flex-pack: end;
      justify-content: flex-end;
  margin-left: none !important;
}

.pagination.center {
  -ms-flex-pack: center;
      justify-content: center;
}

.pagination .active a {
  color: #fff;
  cursor: pointer;
  background-color: #337ab7;
  border-color: #337ab7;
}

.pagination .active a:hover {
  font-weight: normal;
  color: #fff;
  cursor: pointer;
  background-color: #337ab7;
  border-color: #337ab7;
}

.pagination .disabled a {
  color: grey;
  opacity: 0.7;
  cursor: not-allowed;
  pointer-events: none;
}

.pagination li {
  list-style: none;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.pagination li:first-child a {
  border-radius: 3px 0px 0px 3px;
}

.pagination li:last-child a {
  border-radius: 0px 3px 3px 0px;
}

.pagination li a,
.pagination li span {
  float: left;
  padding: 6px 12px;
  line-height: 1.42857143;
  color: #337ab7;
  text-decoration: none;
  background: transparent;
  border: 1px solid #ddd;
}

.pagination li a:focus,
.pagination li span:focus {
  background: #337ab7;
  color: #fff;
  border: 1px solid #337ab7;
}

.pagination li a:hover,
.pagination li span:hover {
  color: #23527c;
  background-color: #eee;
  border-color: #ddd;
}

.progress {
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  height: 25px;
  margin: 20px 0;
  background-color: rgba(236, 236, 236, 0.34);
  border-radius: 4px;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
}

.progress .progress-bar {
  border-radius: 4px 0px 0px 4px;
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
}

.progress .progress-bar span {
  line-height: 25px;
  font-weight: bold;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

.progress-bar:not(:first-child) {
  border-radius: 0;
}

.progress.line {
  height: 5px !important;
}

.row {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  margin-bottom: 0.3125rem;
  -ms-flex: 1;
      flex: 1;
}

.container-full {
  display: -ms-flexbox;
  display: flex;
}

.container-flex {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  padding: 50px;
  padding: 1.25rem;
}

@media (max-width: 480px) {
  .container {
    width: 90%;
  }
}

@media (max-width: 767px) {
  .container {
    width: 90%;
  }
}

@media (min-width: 768px) and (max-width: 979px) {
  .container {
    width: 90%;
  }
}

@media (min-width: 1200px) {
  .container {
    width: 1170px;
  }
}

a.button,
button.default,
button.info,
button.success,
button.danger,
button.warning,
button.dark,
button.primary {
  font-size: 14px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-align: center;
      align-items: center;
  outline: none;
  cursor: pointer;
  margin: 3px;
  border: none;
  border-radius: 2px;
  transition: 0.3s ease-out;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button:hover,
button.default:hover,
button.info:hover,
button.success:hover,
button.danger:hover,
button.warning:hover,
button.dark:hover,
button.primary:hover {
  transform: translateY(-2px);
}

a.button:active,
button.default:active,
button.info:active,
button.success:active,
button.danger:active,
button.warning:active,
button.dark:active,
button.primary:active {
  transform: translateY(3px);
}

a.button.info,
button.info,
button.info,
button.circle.info {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #5BC0DE;
  color: #fff;
}

a.button.info:hover,
button.info:hover,
button.info:hover,
button.circle.info:hover {
  background: #42a7c5;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.dark,
button.dark,
button.dark,
button.circle.dark {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #123159;
  color: #fff;
}

a.button.dark:hover,
button.dark:hover,
button.dark:hover,
button.circle.dark:hover {
  background: #001840;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.danger,
button.danger,
button.danger,
button.circle.danger {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #D9534F;
  color: #fff;
}

a.button.danger:hover,
button.danger:hover,
button.danger:hover,
button.circle.danger:hover {
  background: #c03a36;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.warning,
button.warning,
button.warning,
button.circle.warning {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #F0AD4E;
  color: #fff;
}

a.button.warning:hover,
button.warning:hover,
button.warning:hover,
button.circle.warning:hover {
  background: #d79435;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.primary,
button.primary,
button.primary,
button.circle.primary {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #337AB7;
  color: #fff;
}

a.button.primary:hover,
button.primary:hover,
button.primary:hover,
button.circle.primary:hover {
  background: #1a619e;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.default,
button.default,
button.default,
button.circle.default {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: rgba(230, 230, 230, 0.71);
  color: #303030;
}

a.button.default:hover,
button.default:hover,
button.default:hover,
button.circle.default:hover {
  background: rgba(205, 205, 205, 0.71);
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.success,
button.success,
button.success,
button.circle.success {
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #5CB85C;
  color: #fff;
}

a.button.success:hover,
button.success:hover,
button.success:hover,
button.circle.success:hover {
  background: #439f43;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

a.button.l,
button.l {
  padding: 15px 50px;
  font-size: 16px;
}

a.button.m,
button.m {
  padding: 8px 8px;
  font-size: 14px;
}

a.button.s,
button.s {
  padding: 3px 5px;
  margin: 3px;
  border-radius: 3px;
  font-size: 12px;
  font-weight: normal;
}

a.button.block,
button.block {
  display: block !important;
  -ms-flex-align: center;
      align-items: center;
  -ms-flex-pack: center;
      justify-content: center;
  text-align: center;
  padding: 8px 0;
  width: 100%;
}

a.button.disabled,
button.disabled {
  opacity: 0.4;
  cursor: no-drop;
  color: #4C4C4C;
}

a.button.close,
button.close {
  border: none;
}

a.button.close:after,
button.close:after {
  content: '\2613';
}

a.button.rounded,
button.rounded {
  padding-left: 30px !important;
  padding-right: 30px !important;
  border-radius: 24px;
}

a.button.no-radius,
button.no-radius {
  border-radius: 0;
}

.button-group {
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  min-height: 1px;
  vertical-align: middle;
  margin: 3px 0px;
  border: 1px solid rgba(128, 128, 128, 0.22);
  padding-left: 5px;
}

.button-group a.button,
.button-group button {
  margin-left: -2px;
  border-radius: 0;
  box-shadow: none;
}

.button-group a.button:first-child,
.button-group button:first-child {
  border-radius: 3px 0 0 3px;
}

.button-group a.button:last-child,
.button-group button:last-child {
  border-radius: 0 3px 3px 0;
}

form {
  display: block;
  padding: 0.625rem;
}

form-element,
.form-element {
  -ms-flex: 1;
      flex: 1;
  margin-bottom: 0.375rem;
}

label {
  padding: 0.125rem;
}

.input-item {
  height: 1.875rem;
  width: 100%;
  color: #4d4e4d;
  border: 1px solid #dedede;
  border-radius: 3px;
  padding-left: 0.3125rem;
}

.input-item:focus {
  background: rgba(228, 226, 226, 0.62);
  border: 1px solid rgba(169, 168, 168, 0.7);
  outline: none;
  transition: all 0.2s ease-in;
}

.inline {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: row;
      flex-direction: row;
}

.inline button {
  margin: 0;
}

.inline .input-item {
  margin-right: 0.625rem;
}

.inline .input-item:last-child {
  margin-right: 0;
}

textarea.input-item {
  min-height: 7.5rem;
  width: 100%;
}

.side-by .input-item {
  margin-right: 0 !important;
  border-radius: 0;
}

.side-by label {
  border-radius: 0;
  height: 1.46875rem;
  color: #4a4a4a;
  padding-right: 4px;
}

.side-by label.info {
  background: #5BC0DE;
  color: #fff;
}

.side-by label.dark {
  background: #123159;
  color: #fff;
}

.side-by label.danger {
  background: #D9534F;
  color: #fff;
}

.side-by label.warning {
  background: #F0AD4E;
  color: #fff;
}

.side-by label.primary {
  background: #337AB7;
  color: #fff;
}

.side-by label.default {
  background: rgba(230, 230, 230, 0.71);
  color: #123159;
  background: #dedede !important;
}

.side-by label.success {
  background: #5CB85C;
  color: #fff;
}

label {
  padding: 0.2125rem;
  white-space: nowrap;
  color: #5d5d5d;
}

.input-item {
  background: transparent;
}

.input-check,
.input-radio {
  position: static;
}

.has-info {
  color: #5BC0DE;
}

select[class^="input-"].info,
textarea.info,
input[class^="input"].info {
  border: 1px solid #5BC0DE !important;
  color: #000;
}

select[class^="input-"].info:focus,
textarea.info:focus,
input[class^="input"].info:focus {
  border: 1px solid #5BC0DE !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-dark {
  color: #123159;
}

select[class^="input-"].dark,
textarea.dark,
input[class^="input"].dark {
  border: 1px solid #123159 !important;
  color: #000;
}

select[class^="input-"].dark:focus,
textarea.dark:focus,
input[class^="input"].dark:focus {
  border: 1px solid #123159 !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-error {
  color: #D9534F;
}

select[class^="input-"].error,
textarea.error,
input[class^="input"].error {
  border: 1px solid #D9534F !important;
  color: #000;
}

select[class^="input-"].error:focus,
textarea.error:focus,
input[class^="input"].error:focus {
  border: 1px solid #D9534F !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-warning {
  color: #F0AD4E;
}

select[class^="input-"].warning,
textarea.warning,
input[class^="input"].warning {
  border: 1px solid #F0AD4E !important;
  color: #000;
}

select[class^="input-"].warning:focus,
textarea.warning:focus,
input[class^="input"].warning:focus {
  border: 1px solid #F0AD4E !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-primary {
  color: #337AB7;
}

select[class^="input-"].primary,
textarea.primary,
input[class^="input"].primary {
  border: 1px solid #337AB7 !important;
  color: #000;
}

select[class^="input-"].primary:focus,
textarea.primary:focus,
input[class^="input"].primary:focus {
  border: 1px solid #337AB7 !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-default {
  color: rgba(230, 230, 230, 0.71);
}

select[class^="input-"].default,
textarea.default,
input[class^="input"].default {
  border: 1px solid rgba(230, 230, 230, 0.71) !important;
  color: #000;
}

select[class^="input-"].default:focus,
textarea.default:focus,
input[class^="input"].default:focus {
  border: 1px solid rgba(230, 230, 230, 0.71) !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-success {
  color: #5CB85C;
}

select[class^="input-"].success,
textarea.success,
input[class^="input"].success {
  border: 1px solid #5CB85C !important;
  color: #000;
}

select[class^="input-"].success:focus,
textarea.success:focus,
input[class^="input"].success:focus {
  border: 1px solid #5CB85C !important;
}

[class^="input-"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.input-dropdown {
  height: 2.1875rem;
}

.help-block {
  color: #D9534F;
}

@media (max-width: 768px) {
  .input-item {
    margin-bottom: 5px;
    width: 100%;
  }

  .inline {
    -ms-flex-direction: column;
        flex-direction: column;
  }

  .side-by label {
    display: -ms-flexbox;
    display: flex;
    border-right: 2px solid rgba(128, 128, 128, 0);
  }

  .form-element {
    display: block !important;
  }

  button {
    display: block;
  }
}

.inline.side-by select.input-item {
  height: 1.6875rem !important;
}

input[type=checkbox],
input[type=radio] {
  margin: 0.3125rem;
  cursor: pointer;
}

input[type=checkbox]:checked + :focus,
input[type=radio]:checked + :focus {
  outline: none;
}

input[type="text"]:disabled {
  background: #dddddd;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100vh;
  overflow: auto;
  background: rgba(14, 14, 14, 0.82);
}

.modal.active {
  display: block;
}

.modal-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 0;
  width: 80%;
  position: relative;
  border-radius: 2px;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
  -webkit-animation-name: fadein;
  -webkit-animation-duration: 0.6s;
  animation-name: fadein;
  animation-duration: .6s;
}

.modal-content .modal-body {
  padding: 10px;
  border-bottom: 1px solid #fff5f5;
  color: #525252;
}

.modal-content .modal-header {
  padding: 9px;
  background: #dedede;
  color: #123159;
  border-bottom: 2px solid #d6d6d6;
}

.modal-content .modal-header button.close {
  cursor: pointer !important;
  float: right;
  height: 0.75rem;
  width: 0.75rem;
  margin-top: 0.35625rem;
  margin-right: -0.0625rem;
}

.modal-content .modal-header button.close:after {
  position: absolute;
  right: 9px;
  top: 9px;
  font-size: 14px;
  color: rgba(210, 210, 210, 0.5);
}

.modal-content .modal-footer {
  min-height: 38px;
  padding: 9px;
}

.modal-content .modal-footer button .right {
  float: right;
  margin-right: 3px;
}

.link-right {
  float: right;
  margin-right: 10px;
}

.link-left {
  float: left;
  margin-left: 10px;
  padding: 12px 8px;
  font-size: 15px;
  min-width: 150px;
  margin-right: 10px;
  outline: none;
  text-decoration: none;
  border: 1px solid rgba(238, 238, 238, 0.74);
  transition: all 0.5s;
}

.modal.small .modal-content {
  width: 20%;
}

.modal.medium .modal-content {
  width: 35%;
}

.modal.large .modal-content {
  width: 50%;
}

.modal.extra-large .modal-content {
  width: 80%;
}

.modal.full-screen .modal-content {
  width: 100%;
  height: 100vh;
  margin: 0;
}

@keyframes fadein {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

/* Firefox < 16 */

/* Safari, Chrome and Opera > 12.1 */

/* Internet Explorer */

/* Opera < 12.1 */

@media all and (max-width: 768px) {
  .modal.small .modal-content {
    width: 55%;
  }

  .modal.medium .modal-content {
    width: 60%;
  }

  .modal.large .modal-content {
    width: 70%;
  }
}

#myInput {
  background-position: 0.625rem 0.75rem;
  background-repeat: no-repeat;
  font-size: 1rem;
  padding: 0.75rem 1.25rem 0.75rem 2.5rem;
  border: 0.0625rem solid #ddd;
  margin-bottom: 12px;
}

#myInput:focus {
  outline: none;
  border: 2px dashed #dedede;
}

#filter-items {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

#filter-items li a {
  border: 0.0625rem solid #ddd;
  margin-top: -0.0625rem;
  background-color: #f6f6f6;
  padding: 0.75rem;
  text-decoration: none;
  font-size: 1.125rem;
  color: #123159;
  display: block;
}

#filter-items li a.heading-title {
  background-color: #e2e2e2;
  cursor: default;
}

#filter-items li a:hover:not(.heading-title) {
  background-color: #eee;
}

#filter-items li a.heading-title.info {
  background-color: #5BC0DE;
  color: #fff;
}

#filter-items li a.heading-title.dark {
  background-color: #123159;
  color: #fff;
}

#filter-items li a.heading-title.danger {
  background-color: #D9534F;
  color: #fff;
}

#filter-items li a.heading-title.warning {
  background-color: #F0AD4E;
  color: #fff;
}

#filter-items li a.heading-title.primary {
  background-color: #337AB7;
  color: #fff;
}

#filter-items li a.heading-title.default {
  color: gray;
}

#filter-items li a.heading-title.success {
  background-color: #5CB85C;
  color: #fff;
}

.breadcrumb {
  background: #dedede;
  padding-left: 0.3125rem;
}

.breadcrumb li {
  list-style: none;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.breadcrumb li a {
  padding: 10px 3px;
  color: rgba(230, 230, 230, 0.71);
  font-weight: 400;
}

.breadcrumb li a:after {
  content: ' /';
  color: #4C4C4C;
}

.breadcrumb.info {
  background-color: #5BC0DE;
}

.breadcrumb.info li a {
  color: #fff;
}

.breadcrumb.info li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.info li a:hover {
  color: #4C4C4C;
}

.breadcrumb.dark {
  background-color: #123159;
}

.breadcrumb.dark li a {
  color: #fff;
}

.breadcrumb.dark li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.dark li a:hover {
  color: #4C4C4C;
}

.breadcrumb.danger {
  background-color: #D9534F;
}

.breadcrumb.danger li a {
  color: #fff;
}

.breadcrumb.danger li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.danger li a:hover {
  color: #4C4C4C;
}

.breadcrumb.warning {
  background-color: #F0AD4E;
}

.breadcrumb.warning li a {
  color: #fff;
}

.breadcrumb.warning li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.warning li a:hover {
  color: #4C4C4C;
}

.breadcrumb.primary {
  background-color: #337AB7;
}

.breadcrumb.primary li a {
  color: #fff;
}

.breadcrumb.primary li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.primary li a:hover {
  color: #4C4C4C;
}

.breadcrumb.default {
  background-color: rgba(230, 230, 230, 0.71);
}

.breadcrumb.default li a {
  color: #000;
}

.breadcrumb.default li a:after {
  content: ' /';
  color: #000;
}

.breadcrumb.default li a:hover {
  color: #4C4C4C;
}

.breadcrumb.success {
  background-color: #5CB85C;
}

.breadcrumb.success li a {
  color: #fff;
}

.breadcrumb.success li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.success li a:hover {
  color: #4C4C4C;
}

.breadcrumb li:last-child a::after,
.breadcrumb li:last-child a::before {
  content: none;
}

.breadcrumb .disabled {
  color: #dedede !important;
  pointer-events: none;
  cursor: not-allowed !important;
}

.badge {
  display: inline-block;
  padding: 0.25rem 0.5625rem;
  font-size: 0.6875rem;
  line-height: 1;
  color: #fff;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  background-color: #dedede;
  border-radius: 11px;
  margin-left: 3px;
  font-weight: 300;
  color: #4C4C4C;
}

.alert {
  white-space: nowrap;
  display: block;
  height: 50px;
  max-width: 500px;
  line-height: 50px;
  padding: 2px 30px;
  box-shadow: 0px 0px 9px 4px rgba(78, 78, 78, 0.22);
  background-color: #eee;
  font-size: 17px;
  font-weight: 400;
  color: #808080;
  border-radius: 3px;
  margin-bottom: 10px;
}

.alert .close {
  height: 0;
  width: 0;
}

.alert .close:after {
  content: '\00d7';
  position: absolute;
  right: 7px;
  top: -13px;
  font-size: 14px;
  cursor: pointer;
  height: 0;
}

[class^="alert"].round {
  border-radius: 30px;
}

.alert.top-right {
  position: absolute;
  top: 5%;
  right: 5%;
  z-index: 100;
}

.alert.top-left {
  position: absolute;
  top: 5%;
  left: 5%;
  z-index: 100;
}

.alert.bottom-right {
  position: absolute;
  bottom: 0%;
  right: 5%;
  z-index: 100;
}

.alert.bottom-left {
  position: absolute;
  bottom: 0%;
  left: 5%;
  z-index: 100;
}

.card {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  border-radius: 2px;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
  transition: all 0.25s ease;
  width: 100%;
}

.card img {
  display: block;
  width: 100%;
  border-bottom: 1px solid rgba(56, 56, 56, 0.12);
}

.card .header {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  -ms-flex-align: center;
      align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
}

.card .header .center {
  -ms-flex: 1;
      flex: 1;
}

.card .header-default {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  -ms-flex-align: center;
      align-items: center;
  background: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.07);
}

.card .footer {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  -ms-flex-align: center;
      align-items: center;
  border-top: 1px solid rgba(0, 0, 0, 0.06);
}

.card .footer .center {
  -ms-flex: 1;
      flex: 1;
}

.card .footer-default {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  -ms-flex-align: center;
      align-items: center;
  background: none;
  border-top: 1px solid rgba(0, 0, 0, 0.07);
}

.card .body {
  padding: 0.9375rem;
}

.card:hover {
  transform: translateY(-1px);
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
}

.card.dark {
  background: -owg-linear-gradient(#123159, #0f294d);
  background: linear-gradient(#123159, #0f294d);
  color: white;
}

.header.primary {
  background: #337AB7;
  color: white;
}

.header.dark {
  background: #123159;
  color: white;
}

.header.warning {
  background: #5BC0DE;
  color: white;
}

.header.success {
  background: #5CB85C;
  color: white;
}

.header.info {
  background: #5BC0DE;
  color: white;
}

.header.danger {
  background: #D9534F;
  color: white;
}

div.box-layout {
  width: 1170px;
  margin: 0 auto;
}

div.box-layout .leftSide {
  width: 50%;
  float: left;
}

div.box-layout .rightSide {
  width: 50%;
  float: right;
}

ol {
  padding: 10px;
}

ol li {
  padding: 0;
  margin: 0;
}

ul li {
  list-style: none;
}

ul.with-bold li {
  list-style-type: disc;
}

.list-group {
  margin: 2px;
  padding: 0;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

.list-group .active {
  background: #dedede;
}

.list-group .active a {
  color: #fff;
}

.list-group .active a:hover {
  color: #fff;
}

.list-group li {
  position: relative;
  padding: 10px;
  margin-bottom: -1px;
  border: 1px solid #ddd;
}

.list-group li .badge,
.list-group li .badge-primary,
.list-group li .badge-success,
.list-group li .badge-info,
.list-group li .badge-warning,
.list-group li .badge-danger,
.list-group li .badge-dark,
.list-group li .badge-default {
  float: right;
}

.list-group li a {
  text-decoration: none;
  color: #4C4C4C;
  padding: 10px;
  transition: all 0.1s;
}

.list-group li a:hover {
  color: #6f6f6f;
  cursor: pointer;
}

.list-group.striped :nth-child(odd) {
  background: #dedede;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  /*background-color: #f9f9f9;*/
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
  margin-left: 2px;
  border-radius: 2px;
}

.dropdown-content a {
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-content a:hover {
  background: rgba(255, 255, 255, 0.1);
}

.dropdown:hover .dropdown-content {
  display: block;
}

.dropdown:hover .dropbtn {
  background: transparent;
}

.dropdown-content.bg-default {
  background: #fff !important;
  color: #123159 !important;
}

.dropdown-content.bg-primary a,
.dropdown-content.bg-info a,
.dropdown-content.bg-dark a,
.dropdown-content.bg-warning a,
.dropdown-content.bg-danger a,
.dropdown-content.bg-success a {
  color: #fff !important;
}

[title] {
  color: #337AB7;
}

.hover,
[title] {
  position: relative;
}

[title]:before,
[title]:after,
.hover:before,
.hover:after {
  position: absolute;
  visibility: hidden;
  -moz-filter: opacity(20%);
  filter: opacity(20%);
  transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out, transform 0.2s cubic-bezier(0.71, 1.7, 0.77, 1.24);
  transform: translate3d(0, 0, 0);
  pointer-events: none;
}

[title]:hover:before,
[title]:hover:after,
[title]:focus:before,
[title]:focus:after,
.hover:hover:before,
.hover:hover:after,
.hover:focus:before,
.hover:focus:after {
  visibility: visible;
  -moz-filter: opacity(100%);
  filter: opacity(100%);
}

/* Base styles for the hover's directional arrow */

.hover:before,
[title]:before {
  z-index: 1000;
  border: 6px solid transparent;
  background: transparent;
  content: "";
}

/* Base styles for the tooltip's content area */

.hover:after,
[title]:after {
  z-index: 1000;
  padding: 8px;
  width: 160px;
  background-color: #000;
  background-color: rgba(51, 51, 51, 0.9);
  color: #fff;
  content: attr(title);
  font-size: 14px;
  line-height: 1.2;
  border-radius: 2px;
}

/* Top (default) */

[title]:before,
[title]:after,
.hover:before,
.hover:after,
.hover.top:before,
.hover.top:after {
  bottom: 100%;
  left: 50%;
}

[title]:before,
.hover:before,
.hover.top:before {
  margin-left: -6px;
  margin-bottom: -12px;
  border-top-color: #000;
  border-top-color: rgba(51, 51, 51, 0.9);
}

/* Horizontally align top/bottom tooltips */

[title]:after,
.hover:after,
.hover.top:after {
  margin-left: -80px;
}

[title]:hover:before,
[title]:hover:after,
[title]:focus:before,
[title]:focus:after,
.hover:hover:before,
.hover:hover:after,
.hover:focus:before,
.hover:focus:after,
.hover.top:hover:before,
.hover.top:hover:after,
.hover.top:focus:before,
.hover.top:focus:after {
  transform: translateY(-12px);
}

/* Left */

.hover.left:before,
.hover.left:after {
  right: 100%;
  bottom: 50%;
  left: auto;
}

.hover.left:before {
  margin-left: 0;
  margin-right: -12px;
  margin-bottom: 0;
  border-top-color: transparent;
  border-left-color: #000;
  border-left-color: rgba(51, 51, 51, 0.9);
}

.hover.left:hover:before,
.hover.left:hover:after,
.hover.left:focus:before,
.hover.left:focus:after {
  transform: translateX(-12px);
}

/* Bottom */

.hover.bottom:before,
.hover.bottom:after {
  top: 100%;
  bottom: auto;
  left: 50%;
}

.hover.bottom:before {
  margin-top: -12px;
  margin-bottom: 0;
  border-top-color: transparent;
  border-bottom-color: #000;
  border-bottom-color: rgba(51, 51, 51, 0.9);
}

.hover.bottom:hover:before,
.hover.bottom:hover:after,
.hover.bottom:focus:before,
.hover.bottom:focus:after {
  transform: translateY(12px);
}

/* Right */

.hover.right:before,
.hover.right:after {
  bottom: 50%;
  left: 100%;
}

.hover.right:before {
  margin-bottom: 0;
  margin-left: -12px;
  border-top-color: transparent;
  border-right-color: #000;
  border-right-color: rgba(51, 51, 51, 0.9);
}

.hover.right:hover:before,
.hover.right:hover:after,
.hover.right:focus:before,
.hover.right:focus:after {
  transform: translateX(12px);
}

/* Move directional arrows down a bit for left/right tooltips */

.hover.left:before,
.hover.right:before {
  top: 3px;
}

/* Vertically center tooltip content for left/right tooltips */

.hover.left:after,
.hover.right:after {
  margin-left: 0;
  margin-bottom: -16px;
}

.hover.right {
  margin-left: 0;
  display: inline;
  float: none;
}

.img-hover {
  position: relative;
  min-width: 200px;
  height: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: row;
      flex-direction: row;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: distribute;
      justify-content: space-around;
  -ms-flex-align: stretch;
      align-items: stretch;
  -ms-flex-line-pack: center;
      align-content: center;
}

.img-hover img {
  transition: opacity 0.2s ease-in-out;
  -ms-flex: 1 0 auto;
      flex: 1 0 auto;
}

.img-hover .hover-content {
  position: absolute;
  -ms-flex-item-align: center;
      -ms-grid-row-align: center;
      align-self: center;
  visibility: hidden;
}

.img-hover:hover img,
.img-hover:focus img {
  opacity: .3;
}

.img-hover:hover .hover-content,
.img-hover:focus .hover-content {
  visibility: visible;
}

.img-hover.slide-down img {
  transition: top 0.2s ease-in-out;
}

ul.tab-selector {
  display: -ms-flexbox;
  display: flex;
  list-style-type: none;
  -ms-flex: 1 100%;
      flex: 1 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
  background-color: #f1f1f1;
}

ul.tab-selector li {
  cursor: pointer;
  display: inline-block;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  transition: 0.3s;
  font-size: 17px;
  float: left;
}

ul.tab-selector li.active {
  background-color: rgba(221, 221, 221, 0.3);
}

ul.tab-selector li:hover {
  background-color: rgba(201, 201, 201, 0.3);
}

ul.tab-selector li:focus {
  background-color: #ccc;
}

.tab-content.with-border {
  -ms-flex: 1;
      flex: 1;
  border: 1px solid #ccc;
}

.tab-content [id] {
  display: none;
  padding: 6px 12px;
  border-top: none;
}

.tab-content [id].active {
  display: block;
}

ul.tab-selector.vertical {
  -ms-flex: none;
      flex: none;
  -ms-flex-direction: column;
      flex-direction: column;
  width: 20%;
}

.table {
  border: 1px solid lightgrey;
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
}

.table > tbody > tr > td,
.table > tbody > tr > th,
.table > tfoot > tr > td,
.table > tfoot > tr > th,
.table > thead > tr > td,
.table > thead > tr > th {
  padding: 8px 5px;
  line-height: 1.42857143;
  vertical-align: top;
}

.table tr {
  border: 1px solid #dadada;
}

.table.stripe tr:nth-child(even) {
  background: #d3d3d3;
}

tfoot,
thead {
  font-weight: bold;
  background: rgba(128, 128, 128, 0.16);
}

.text-center {
  text-align: center;
}

.center {
  margin: 0 auto;
}

.small {
  font-size: smaller;
}

.justify {
  text-align: justify;
}

p.right {
  float: right;
}

.hide {
  display: none;
}

.title {
  font-weight: bolder;
}

.info {
  color: #5BC0DE;
}

.dark {
  color: #123159;
}

.danger {
  color: #D9534F;
}

.warning {
  color: #F0AD4E;
}

.primary {
  color: #337AB7;
}

.default {
  color: rgba(230, 230, 230, 0.71);
}

.success {
  color: #5CB85C;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.5;
  font-weight: 400;
  margin: 0.625rem 0;
}

h1 {
  font-size: 2.25rem;
}

h2 {
  font-size: 1.875rem;
}

h3 {
  font-size: 1.5rem;
}

h4 {
  font-size: 1.25rem;
}

h5 {
  font-size: 1.125rem;
}

h6 {
  font-size: 1rem;
}

hr {
  margin: 1.3rem 0 !important;
}

.underline {
  text-decoration: underline;
}

.dot-underline {
  text-decoration: underline dotted;
}

.double-underline {
  text-decoration: underline double;
}

.dash-underline {
  text-decoration: underline dashed;
}

.wavy-underline {
  text-decoration: underline wavy;
}

.line-over {
  text-decoration: overline;
}

.line-through {
  text-decoration: line-through;
}

.italic {
  font-style: italic;
}

.oblique {
  font-style: oblique;
}

.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capital {
  text-transform: capitalize;
}

small {
  font-size: smaller;
}

blockquote {
  font-size: 18px;
  font-style: italic;
  width: 500px;
  margin: 0.25em 0;
  padding: 0.25em 40px;
  line-height: 1.45;
  position: relative;
  color: #383838;
}

blockquote::before {
  display: block;
  content: "\201C";
  font-size: 80px;
  position: absolute;
  left: -2px;
  top: -33px;
  color: #7a7a7a;
}

blockquote cite {
  color: #999999;
  font-size: 14px;
  display: block;
  margin-top: 5px;
}

blockquote cite::before {
  content: "\2014 \2009";
}

blockquote.with-border {
  border-left: 5px solid lightgrey;
  padding: 1.0625rem 2.0625rem;
}

blockquote.with-border::before {
  top: -19px;
}

.accordion button.target {
  cursor: pointer;
  padding: 18px 0;
  width: 100%;
  font-size: 15px;
  display: block;
}

.accordion button.target span {
  padding-left: 5px;
}

div.panel {
  padding: 0 18px;
  display: none;
}

div.panel.active {
  display: block;
  border: 1px solid #e2e2e2;
}

div.panel.hide {
  display: none;
}

nav {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}

nav .logo {
  max-height: 5.625rem;
  max-width: 13.75rem;
  overflow: hidden;
  background: transparent;
  padding-right: 1.25rem;
}

nav .item {
  margin-top: 0;
}

nav .item li {
  float: left;
  padding: 0.375rem 0.1875rem;
  position: relative;
  line-height: 2.9375rem;
}

nav .item li a {
  padding: 1.1875rem 0.6875rem;
  text-align: center;
  font-size: 1rem;
}

nav .item li a:hover ~ .sub {
  display: block;
  z-index: 3;
}

nav .item li a button {
  margin-top: 0 !important;
}

nav .item li .sub {
  min-width: 9.0625rem;
  height: auto;
  position: absolute;
  top: 3.625rem;
  left: 0.625rem;
  display: none;
  z-index: 200;
}

nav .item li .sub:hover {
  display: block;
}

nav .item li .sub li {
  float: none;
  padding: 0;
  margin: 0;
  line-height: 0.25rem;
  min-width: 11.25rem;
}

nav .item li .sub li a {
  padding: 0.875rem 0.6875rem;
  background: grey;
  display: block;
  transition: all 0.5s ease-out;
  border-bottom: 0.0625rem solid transparent;
  text-align: left;
  font-size: 0.875rem;
}

nav .item li .sub li a:hover {
  background: lightgrey;
  color: #000;
}

nav .item li .sub .sub {
  position: absolute;
  top: 0;
  left: 100%;
}

@media screen and (max-width: 768px) {
  nav {
    -ms-flex-direction: column !important;
        flex-direction: column !important;
    transition: all 0.5s ease-in;
  }

  nav .item {
    -ms-flex-align: center;
        align-items: center;
    display: none;
    align-items: center;
    margin-bottom: 0.625rem;
  }

  nav .item li {
    line-height: 1.625rem;
  }

  nav .item .sub {
    position: relative !important;
    top: 0 !important;
    left: 1.9375rem !important;
  }

  nav .right {
    margin-left: 0 !important;
    display: inline;
    float: none !important;
  }

  nav .item.right {
    display: none;
  }
}

.item.right .sub {
  left: 0;
  min-width: 0;
}

.item.right .sub li {
  min-width: 0;
}

nav .for-mobile {
  display: none;
  box-shadow: none !important;
}

@media screen and (max-width: 768px) {
  nav .for-mobile {
    right: 34px;
    margin-top: 10px !important;
    display: block;
    position: absolute;
    width: 42px;
    height: 23px;
    padding: 7px;
    transition: all 0.15s;
    background: #dedede;
    border-radius: 2px;
    border: 1px solid #c1c1c1;
    box-shadow: none !important;
    outline: none;
  }

  nav .for-mobile:after,
  nav .for-mobile:before {
    content: '';
    position: absolute;
    display: block;
    width: 42px;
    height: 3px;
    background: rgba(99, 99, 99, 0.51);
    border-radius: 4px;
  }

  nav .for-mobile:before {
    top: 6px;
    transition: all 0.35s ease-out;
  }

  nav .for-mobile:after {
    top: 17px;
    box-shadow: 0 11px rgba(99, 99, 99, 0.51);
    transition: all 0.45s ease-out;
  }

  nav .for-mobile.open {
    background: #dedede !important;
  }

  nav .for-mobile.open:before,
  nav .for-mobile.open:after {
    top: 23%;
    margin-top: 10px;
    background: rgba(99, 99, 99, 0.51);
  }

  nav .for-mobile.open:before {
    transform: rotate(45deg);
  }

  nav .for-mobile.open:after {
    transform: rotate(-45deg);
    box-shadow: none;
  }

  nav .show-menu {
    display: -ms-flexbox !important;
    display: flex !important;
    -ms-flex-direction: column;
        flex-direction: column;
  }
}

.for-mobile.bg-info {
  background: #5BC0DE;
  border: 1px solid #8df2ff;
}

.for-mobile.bg-info:after,
.for-mobile.bg-info:before {
  background: #8df2ff;
}

.for-mobile.bg-info:after {
  box-shadow: 0 11px #8df2ff;
}

.for-mobile.bg-info.open {
  background: #5BC0DE !important;
}

.for-mobile.bg-info.open:before,
.for-mobile.bg-info.open:after {
  top: 23%;
  margin-top: 10px;
  background: #8df2ff;
}

.for-mobile.bg-dark {
  background: #123159;
  border: 1px solid #44638b;
}

.for-mobile.bg-dark:after,
.for-mobile.bg-dark:before {
  background: #44638b;
}

.for-mobile.bg-dark:after {
  box-shadow: 0 11px #44638b;
}

.for-mobile.bg-dark.open {
  background: #123159 !important;
}

.for-mobile.bg-dark.open:before,
.for-mobile.bg-dark.open:after {
  top: 23%;
  margin-top: 10px;
  background: #44638b;
}

.for-mobile.bg-danger {
  background: #D9534F;
  border: 1px solid #ff8581;
}

.for-mobile.bg-danger:after,
.for-mobile.bg-danger:before {
  background: #ff8581;
}

.for-mobile.bg-danger:after {
  box-shadow: 0 11px #ff8581;
}

.for-mobile.bg-danger.open {
  background: #D9534F !important;
}

.for-mobile.bg-danger.open:before,
.for-mobile.bg-danger.open:after {
  top: 23%;
  margin-top: 10px;
  background: #ff8581;
}

.for-mobile.bg-warning {
  background: #F0AD4E;
  border: 1px solid #ffdf80;
}

.for-mobile.bg-warning:after,
.for-mobile.bg-warning:before {
  background: #ffdf80;
}

.for-mobile.bg-warning:after {
  box-shadow: 0 11px #ffdf80;
}

.for-mobile.bg-warning.open {
  background: #F0AD4E !important;
}

.for-mobile.bg-warning.open:before,
.for-mobile.bg-warning.open:after {
  top: 23%;
  margin-top: 10px;
  background: #ffdf80;
}

.for-mobile.bg-primary {
  background: #337AB7;
  border: 1px solid #65ace9;
}

.for-mobile.bg-primary:after,
.for-mobile.bg-primary:before {
  background: #65ace9;
}

.for-mobile.bg-primary:after {
  box-shadow: 0 11px #65ace9;
}

.for-mobile.bg-primary.open {
  background: #337AB7 !important;
}

.for-mobile.bg-primary.open:before,
.for-mobile.bg-primary.open:after {
  top: 23%;
  margin-top: 10px;
  background: #65ace9;
}

.for-mobile.bg-default {
  background: rgba(230, 230, 230, 0.71);
  border: 1px solid rgba(255, 255, 255, 0.71);
}

.for-mobile.bg-default:after,
.for-mobile.bg-default:before {
  background: rgba(255, 255, 255, 0.71);
}

.for-mobile.bg-default:after {
  box-shadow: 0 11px rgba(255, 255, 255, 0.71);
}

.for-mobile.bg-default.open {
  background: rgba(230, 230, 230, 0.71) !important;
}

.for-mobile.bg-default.open:before,
.for-mobile.bg-default.open:after {
  top: 23%;
  margin-top: 10px;
  background: rgba(255, 255, 255, 0.71);
}

.for-mobile.bg-success {
  background: #5CB85C;
  border: 1px solid #8eea8e;
}

.for-mobile.bg-success:after,
.for-mobile.bg-success:before {
  background: #8eea8e;
}

.for-mobile.bg-success:after {
  box-shadow: 0 11px #8eea8e;
}

.for-mobile.bg-success.open {
  background: #5CB85C !important;
}

.for-mobile.bg-success.open:before,
.for-mobile.bg-success.open:after {
  top: 23%;
  margin-top: 10px;
  background: #8eea8e;
}

.top-bar {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: row;
      flex-direction: row;
  background: rgba(206, 206, 206, 0.17);
  font-size: .85rem;
  padding: 5px 10px;
  box-shadow: 0px 3px 4px 2px rgba(211, 211, 211, 0.41);
  -ms-flex: 1;
      flex: 1;
}

.top-bar .item {
  -ms-flex: 1;
      flex: 1;
  padding: 0 10px;
}

.top-bar .right {
  display: -ms-flexbox;
  display: flex;
  -ms-flex: 1;
      flex: 1;
  -ms-flex-pack: end;
      justify-content: flex-end;
}

.top-bar a {
  padding: 0 5px;
}

.pricing-table {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: "center";
      justify-content: "center";
  -ms-flex-align: "center";
      align-items: "center";
  -ms-flex-wrap: "wrap";
      flex-wrap: "wrap";
  margin: 9px 0px;
}

.pricing-table .plan {
  margin: 8px 8px;
  font: 12px Lucida Sans, trebuchet MS, Arial, Helvetica;
  text-shadow: 0 1px rgba(255, 255, 255, 0.8);
  border: 1px solid #d6d6d6;
  color: #123159;
  text-align: center;
  padding: 20px;
  width: 180px;
  float: left;
  position: relative;
  border-radius: 5px;
}

.pricing-table .plan h3 {
  border-radius: 5px 0 0 0;
}

.pricing-table .plan button {
  display: inline;
}

.pricing-table h3 {
  font-size: 26px;
  font-weight: normal;
  padding: 20px;
  margin: -20px -20px 50px -20px;
  background-color: #d4cfcf;
  background-image: linear-gradient(#fff, #d4cfcf);
}

.pricing-table h3 span {
  display: block;
  font: bold 25px/100px Georgia, Serif;
  color: #777;
  background: #fff;
  border: 5px solid #fff;
  height: 100px;
  width: 100px;
  margin: 10px auto -65px;
  border-radius: 100px;
  box-shadow: 0 5px 20px #ddd inset, 0 3px 0 #999 inset;
}

.pricing-table ul {
  margin: 20px 0 0;
  padding: 0;
  list-style: none;
}

.pricing-table ul li {
  border-top: 1px solid #ddd;
  padding: 10px 0;
}

.plan.bg-primary,
.bg-success,
.bg-info,
.bg-danger,
.bg-warning,
.bg-dark {
  color: #fff !important;
}

.plan.bg-primary h3,
.bg-success h3,
.bg-info h3,
.bg-danger h3,
.bg-warning h3,
.bg-dark h3 {
  color: #636363;
}

.plan.bg-primary button,
.bg-success button,
.bg-info button,
.bg-danger button,
.bg-warning button,
.bg-dark button {
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

ul.tab-selector {
  display: -ms-flexbox;
  display: flex;
  list-style-type: none;
  -ms-flex: 1 100%;
      flex: 1 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
  background-color: #f1f1f1;
}

ul.tab-selector li {
  cursor: pointer;
  display: inline-block;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  transition: 0.3s;
  font-size: 17px;
  float: left;
}

ul.tab-selector li.active {
  background-color: rgba(221, 221, 221, 0.3);
}

ul.tab-selector li:hover {
  background-color: rgba(201, 201, 201, 0.3);
}

ul.tab-selector li:focus {
  background-color: #ccc;
}

.tab-content.with-border {
  -ms-flex: 1;
      flex: 1;
  border: 1px solid #ccc;
}

.tab-content [id] {
  display: none;
  padding: 6px 12px;
  border-top: none;
}

.tab-content [id].active {
  display: block;
}

ul.tab-selector.vertical {
  -ms-flex: none;
      flex: none;
  -ms-flex-direction: column;
      flex-direction: column;
  width: 20%;
}

.wrapper {
  margin: 20px auto;
}

.container {
  margin: 20px auto;
}

[class*="col-"] {
  padding: 0.625rem;
}

@media all and (max-width: 500px) {
  [class*="col-"] {
    width: 97%;
    margin: 0 auto;
  }

  .innerGap {
    padding: 0 !important;
  }

  .divider-in-layout {
    box-shadow: none !important;
  }

  .home-grid-resent {
    width: 94% !important;
    padding: 10px 9px !important;
  }
}

@media all and (min-width: 500px) {
  [class*="col-"]:last-child {
    margin-right: 0;
  }

  .col-1 {
    -ms-flex: 1;
        flex: 1;
  }

  .col-2 {
    -ms-flex: 2;
        flex: 2;
  }

  .col-3 {
    -ms-flex: 3;
        flex: 3;
  }

  .col-4 {
    -ms-flex: 4;
        flex: 4;
  }

  .col-5 {
    -ms-flex: 5;
        flex: 5;
  }

  .col-6 {
    -ms-flex: 6;
        flex: 6;
  }

  .col-7 {
    -ms-flex: 7;
        flex: 7;
  }

  .col-8 {
    -ms-flex: 8;
        flex: 8;
  }

  .col-9 {
    -ms-flex: 9;
        flex: 9;
  }

  .col-10 {
    -ms-flex: 10;
        flex: 10;
  }

  .col-11 {
    -ms-flex: 11;
        flex: 11;
  }

  .col-12 {
    -ms-flex: 12;
        flex: 12;
  }
}

@media all and (min-width: 1000px) {
  .wrapper {
    max-width: 1000px;
  }
}

@media all and (max-width: 768px) {
  .container-full,
  .container {
    -ms-flex-direction: column;
        flex-direction: column;
  }

  .container-full .row,
  .container .row {
    -ms-flex-direction: column;
        flex-direction: column;
  }

  .container-full .row .footer-item ul,
  .container-full .row .footer-item p,
  .container .row .footer-item ul,
  .container .row .footer-item p {
    text-align: center;
  }
}

.space-left {
  margin-left: 15px;
}

.space-right {
  margin-right: 15px;
}

footer {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: row;
      flex-direction: row;
  -ms-flex-pack: justify;
      justify-content: space-between;
  -ms-flex-align: start;
      align-items: flex-start;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  margin: 0;
  padding: 0.9375rem 0.9375rem;
  border: none;
  background: transparent;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

footer .footer-item {
  -ms-flex: 1;
      flex: 1;
}

footer .footer-item p {
  font-size: 23px;
  font-weight: 500;
  border-bottom: 0.0625rem solid;
  padding-bottom: 0.0625rem;
}

footer .footer-item ul {
  margin-top: 0.3125rem;
  margin-left: 0.3125rem;
}

footer .footer-item ul li {
  padding: 0.125rem 0rem;
}

@media only screen and (max-width: 768px) {
  footer {
    -ms-flex-direction: column;
        flex-direction: column;
    -ms-flex-align: center !important;
        align-items: center !important;
  }

  footer .footer-item {
    margin-bottom: 40px;
  }
}

.loading {
  animation-duration: 2s;
  animation-fill-mode: both;
}

.loading.infinite {
  animation-iteration-count: infinite;
}

.bounce {
  animation-name: bounce;
  transform-origin: center bottom;
}

@keyframes flash {
  from, 50%, to {
    opacity: 1;
  }

  25%, 75% {
    opacity: 0;
  }
}

.flash {
  animation-name: flash;
}

@keyframes pulse {
  from {
    transform: scale3d(1, 1, 1);
  }

  50% {
    transform: scale3d(1.05, 1.05, 1.05);
  }

  to {
    transform: scale3d(1, 1, 1);
  }
}

.pulse {
  animation-name: pulse;
}

@keyframes rubberBand {
  from {
    transform: scale3d(1, 1, 1);
  }

  30% {
    transform: scale3d(1.25, 0.75, 1);
  }

  40% {
    transform: scale3d(0.75, 1.25, 1);
  }

  50% {
    transform: scale3d(1.15, 0.85, 1);
  }

  65% {
    transform: scale3d(0.95, 1.05, 1);
  }

  75% {
    transform: scale3d(1.05, 0.95, 1);
  }

  to {
    transform: scale3d(1, 1, 1);
  }
}

.rubberBand {
  animation-name: rubberBand;
}

@keyframes shake {
  from, to {
    transform: translate3d(0, 0, 0);
  }

  10%, 30%, 50%, 70%, 90% {
    transform: translate3d(-10px, 0, 0);
  }

  20%, 40%, 60%, 80% {
    transform: translate3d(10px, 0, 0);
  }
}

.shake {
  animation-name: shake;
}

@keyframes swing {
  20% {
    transform: rotate3d(0, 0, 1, 15deg);
  }

  40% {
    transform: rotate3d(0, 0, 1, -10deg);
  }

  60% {
    transform: rotate3d(0, 0, 1, 5deg);
  }

  80% {
    transform: rotate3d(0, 0, 1, -5deg);
  }

  to {
    transform: rotate3d(0, 0, 1, 0deg);
  }
}

.swing {
  transform-origin: top center;
  animation-name: swing;
}

.newspaper-col-1 {
  min-height: 0.3125rem;
  background: #dedede;
  column-count: 3;
  padding: 0.625rem;
  column-gap: 30px;
  column-count: 1;
}

.newspaper-col-2 {
  min-height: 0.3125rem;
  background: #dedede;
  column-count: 3;
  padding: 0.625rem;
  column-gap: 30px;
  column-count: 2;
}

.newspaper-col-3 {
  min-height: 0.3125rem;
  background: #dedede;
  column-count: 3;
  padding: 0.625rem;
  column-gap: 30px;
  column-count: 3;
}

.newspaper-col-4 {
  min-height: 0.3125rem;
  background: #dedede;
  column-count: 3;
  padding: 0.625rem;
  column-gap: 30px;
  column-count: 4;
}

.newspaper-col-5 {
  min-height: 0.3125rem;
  background: #dedede;
  column-count: 3;
  padding: 0.625rem;
  column-gap: 30px;
  column-count: 5;
}

.newspaper-col-6 {
  min-height: 0.3125rem;
  background: #dedede;
  column-count: 3;
  padding: 0.625rem;
  column-gap: 30px;
  column-count: 6;
}

.full-screen {
  padding: 0 !important;
}

.hd {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

.sd {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

triangle-up {
  display: inline-block;
  height: 0;
  width: 0;
  border-left: 150px solid transparent;
  border-right: 150px solid transparent;
  border-bottom: 150px solid teal;
}

triangle-down {
  display: inline-block;
  height: 0;
  width: 0;
  border-left: 150px solid transparent;
  border-right: 150px solid transparent;
  border-top: 150px solid teal;
}

triangle-right {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 150px solid transparent;
  border-left: 150px solid teal;
  border-bottom: 150px solid transparent;
}

triangle-left {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 150px solid transparent;
  border-right: 150px solid teal;
  border-bottom: 150px solid transparent;
}

triangle-top-left {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 250px solid teal;
  border-right: 250px solid transparent;
}

triangle-top-right {
  display: inline-block;
  height: 0;
  width: 0;
  border-bottom: 250px solid transparent;
  border-right: 250px solid teal;
}

triangle-bottom-right {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 250px solid transparent;
  border-right: 250px solid teal;
}

triangle-bottom-left {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 250px solid transparent;
  border-left: 250px solid teal;
}

triangle {
  display: inline-block;
  height: 0;
  width: 0;
  border-left: 250px solid transparent;
  border-right: 250px solid transparent;
  border-bottom: 250px solid teal;
}

circle {
  display: inline-block;
  width: 200px;
  height: 200px;
  background: #5BC0DE;
  line-height: 200px;
  vertical-align: middle;
  text-align: center;
  font-size: 40px;
  border-radius: 100px;
  border: 2px solid #337AB7;
  transition: all 0.1s ease-in-out;
}

.circle {
  display: inline-block;
  width: 200px;
  height: 200px;
  background: #5BC0DE;
  line-height: 200px;
  vertical-align: middle;
  text-align: center;
  font-size: 40px;
  border-radius: 100px;
  border: 2px solid #337AB7;
  transition: all 0.1s ease-in-out;
}

.circle i {
  font-size: 1.3125rem;
}

oval {
  height: 150;
  width: 300;
  border-radius: 100%;
  display: inline-block;
  background: teal;
  text-align: center;
  line-height: 147px;
  font-size: 40px;
}

button.circle {
  outline: none;
  width: 70px;
  height: 70px;
  background: rgba(230, 230, 230, 0.71);
  line-height: 0;
  text-align: center;
  border-radius: 35px;
  font-size: 11px;
  display: inline-block !important;
}

.square,
square {
  display: inline-block;
  height: 150px;
  width: 150px;
  background: #5BC0DE;
  line-height: 150px;
  vertical-align: middle;
  text-align: center;
  font-size: 15px;
  border: 1px solid #337AB7;
}

.parallelogram,
parallelogram {
  display: inline-block;
  height: 100px;
  width: 200px;
  background: #5BC0DE;
  line-height: 100px;
  vertical-align: middle;
  text-align: center;
  font-size: 15px;
  border: 1px solid #337AB7;
  transform: skew(20deg);
}

.rectangle,
rectangle {
  display: inline-block;
  height: 100px;
  width: 150px;
  background: #5BC0DE;
  line-height: 100px;
  vertical-align: middle;
  text-align: center;
  font-size: 15px;
  border: 1px solid #337AB7;
}

.toggle {
  position: relative;
  display: inline-block;
  width: 59px;
  height: 20px;
}

.toggle input[type=checkbox] {
  display: none;
}

.toggle input[type=checkbox]:checked + .switch::before {
  left: 2.3125rem;
  background: #f8f8f8;
}

.toggle .switch,
.toggle .switch.box {
  border-radius: 2.3125rem;
  position: absolute;
  cursor: pointer;
  top: -0.1875rem;
  left: 0.0625rem;
  right: 0;
  bottom: 0.375rem;
  transition: 0.4s;
  transition: .4s;
}

.toggle .switch:before,
.toggle .switch.box:before {
  border-radius: 50%;
  position: absolute;
  content: '';
  height: 1.8125rem;
  width: 1.8125rem;
  left: -0.0625rem;
  bottom: -0.1875rem;
  transition: 0.4s;
  transition: .4s;
  box-shadow: 0 0 1px #353333;
  background: #e4e4e4;
  border: 0.09375rem solid rgba(105, 105, 105, 0.18);
}

.toggle .box.switch {
  border-radius: 0.125rem;
}

.toggle .box.switch:before {
  border-radius: 0rem;
  height: 1.6875rem;
  width: 1.625rem;
  border: 0.0625rem solid rgba(105, 105, 105, 0.18);
}

input[type=checkbox]:checked + .switch.bg-info::before,
.toggle input[type=checkbox]:checked + .bg-info.switch.box::before {
  background: #5BC0DE;
}

input[type=checkbox]:checked + .switch.bg-dark::before,
.toggle input[type=checkbox]:checked + .bg-dark.switch.box::before {
  background: #123159;
}

input[type=checkbox]:checked + .switch.bg-danger::before,
.toggle input[type=checkbox]:checked + .bg-danger.switch.box::before {
  background: #D9534F;
}

input[type=checkbox]:checked + .switch.bg-warning::before,
.toggle input[type=checkbox]:checked + .bg-warning.switch.box::before {
  background: #F0AD4E;
}

input[type=checkbox]:checked + .switch.bg-primary::before,
.toggle input[type=checkbox]:checked + .bg-primary.switch.box::before {
  background: #337AB7;
}

input[type=checkbox]:checked + .switch.bg-default::before,
.toggle input[type=checkbox]:checked + .bg-default.switch.box::before {
  background: rgba(230, 230, 230, 0.71);
}

input[type=checkbox]:checked + .switch.bg-success::before,
.toggle input[type=checkbox]:checked + .bg-success.switch.box::before {
  background: #5CB85C;
}

/* All the color loop must be placed in here
// to minimize code complexities and weight
// of this framework */

nav.bg-info .item .sub li a {
  background: #5BC0DE;
}

nav.bg-info .item .sub li a:hover {
  background: #42a7c5;
}

footer.bg-info li a,
nav.bg-info li a,
ul.bg-info li a {
  color: #fff !important;
}

.hover.bg-info:after,
.list-group.striped.info :nth-child(odd),
.card.info,
.alert.info,
.bg-info {
  background: -owg-#5BC0DE !important;
  background: -webkit-#5BC0DE !important;
  background: -moz-#5BC0DE !important;
  background: -o-#5BC0DE !important;
  background: #5BC0DE !important;
  color: #fff !important;
}

.top-bar.bg-info,
.bg-info.copyright {
  background: -owg-#47acca !important;
  background: -webkit-#47acca !important;
  background: -moz-#47acca !important;
  background: -o-#47acca !important;
  background: #47acca !important;
  color: #fff !important;
}

.hover.bg-info:before,
[title]:after {
  border-top-color: #5BC0DE;
}

.hover.left.bg-info:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: #5BC0DE;
}

.hover.right.bg-info:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: #5BC0DE;
}

.hover.bottom.bg-info:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: #5BC0DE;
}

nav.bg-dark .item .sub li a {
  background: #123159;
}

nav.bg-dark .item .sub li a:hover {
  background: #001840;
}

footer.bg-dark li a,
nav.bg-dark li a,
ul.bg-dark li a {
  color: #fff !important;
}

.hover.bg-dark:after,
.list-group.striped.dark :nth-child(odd),
.card.dark,
.alert.dark,
.bg-dark {
  background: -owg-#123159 !important;
  background: -webkit-#123159 !important;
  background: -moz-#123159 !important;
  background: -o-#123159 !important;
  background: #123159 !important;
  color: #fff !important;
}

.top-bar.bg-dark,
.bg-dark.copyright {
  background: -owg-#001d45 !important;
  background: -webkit-#001d45 !important;
  background: -moz-#001d45 !important;
  background: -o-#001d45 !important;
  background: #001d45 !important;
  color: #fff !important;
}

.hover.bg-dark:before,
[title]:after {
  border-top-color: #123159;
}

.hover.left.bg-dark:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: #123159;
}

.hover.right.bg-dark:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: #123159;
}

.hover.bottom.bg-dark:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: #123159;
}

nav.bg-danger .item .sub li a {
  background: #D9534F;
}

nav.bg-danger .item .sub li a:hover {
  background: #c03a36;
}

footer.bg-danger li a,
nav.bg-danger li a,
ul.bg-danger li a {
  color: #fff !important;
}

.hover.bg-danger:after,
.list-group.striped.danger :nth-child(odd),
.card.danger,
.alert.danger,
.bg-danger {
  background: -owg-#D9534F !important;
  background: -webkit-#D9534F !important;
  background: -moz-#D9534F !important;
  background: -o-#D9534F !important;
  background: #D9534F !important;
  color: #fff !important;
}

.top-bar.bg-danger,
.bg-danger.copyright {
  background: -owg-#c53f3b !important;
  background: -webkit-#c53f3b !important;
  background: -moz-#c53f3b !important;
  background: -o-#c53f3b !important;
  background: #c53f3b !important;
  color: #fff !important;
}

.hover.bg-danger:before,
[title]:after {
  border-top-color: #D9534F;
}

.hover.left.bg-danger:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: #D9534F;
}

.hover.right.bg-danger:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: #D9534F;
}

.hover.bottom.bg-danger:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: #D9534F;
}

nav.bg-warning .item .sub li a {
  background: #F0AD4E;
}

nav.bg-warning .item .sub li a:hover {
  background: #d79435;
}

footer.bg-warning li a,
nav.bg-warning li a,
ul.bg-warning li a {
  color: #fff !important;
}

.hover.bg-warning:after,
.list-group.striped.warning :nth-child(odd),
.card.warning,
.alert.warning,
.bg-warning {
  background: -owg-#F0AD4E !important;
  background: -webkit-#F0AD4E !important;
  background: -moz-#F0AD4E !important;
  background: -o-#F0AD4E !important;
  background: #F0AD4E !important;
  color: #fff !important;
}

.top-bar.bg-warning,
.bg-warning.copyright {
  background: -owg-#dc993a !important;
  background: -webkit-#dc993a !important;
  background: -moz-#dc993a !important;
  background: -o-#dc993a !important;
  background: #dc993a !important;
  color: #fff !important;
}

.hover.bg-warning:before,
[title]:after {
  border-top-color: #F0AD4E;
}

.hover.left.bg-warning:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: #F0AD4E;
}

.hover.right.bg-warning:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: #F0AD4E;
}

.hover.bottom.bg-warning:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: #F0AD4E;
}

nav.bg-primary .item .sub li a {
  background: #337AB7;
}

nav.bg-primary .item .sub li a:hover {
  background: #1a619e;
}

footer.bg-primary li a,
nav.bg-primary li a,
ul.bg-primary li a {
  color: #fff !important;
}

.hover.bg-primary:after,
.list-group.striped.primary :nth-child(odd),
.card.primary,
.alert.primary,
.bg-primary {
  background: -owg-#337AB7 !important;
  background: -webkit-#337AB7 !important;
  background: -moz-#337AB7 !important;
  background: -o-#337AB7 !important;
  background: #337AB7 !important;
  color: #fff !important;
}

.top-bar.bg-primary,
.bg-primary.copyright {
  background: -owg-#1f66a3 !important;
  background: -webkit-#1f66a3 !important;
  background: -moz-#1f66a3 !important;
  background: -o-#1f66a3 !important;
  background: #1f66a3 !important;
  color: #fff !important;
}

.hover.bg-primary:before,
[title]:after {
  border-top-color: #337AB7;
}

.hover.left.bg-primary:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: #337AB7;
}

.hover.right.bg-primary:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: #337AB7;
}

.hover.bottom.bg-primary:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: #337AB7;
}

nav.bg-default .item .sub li a {
  background: rgba(230, 230, 230, 0.71);
}

nav.bg-default .item .sub li a:hover {
  background: rgba(205, 205, 205, 0.71);
}

footer.bg-default li a,
nav.bg-default li a,
ul.bg-default li a {
  color: #123159 !important;
}

.hover.bg-default:after,
.list-group.striped.default :nth-child(odd),
.card.default,
.alert.default,
.bg-default {
  background: -owg-rgba(230, 230, 230, 0.71) !important;
  background: -webkit-rgba(230, 230, 230, 0.71) !important;
  background: -moz-rgba(230, 230, 230, 0.71) !important;
  background: -o-rgba(230, 230, 230, 0.71) !important;
  background: rgba(230, 230, 230, 0.71) !important;
  color: #123159 !important;
}

.top-bar.bg-default,
.bg-default.copyright {
  background: -owg-rgba(210, 210, 210, 0.71) !important;
  background: -webkit-rgba(210, 210, 210, 0.71) !important;
  background: -moz-rgba(210, 210, 210, 0.71) !important;
  background: -o-rgba(210, 210, 210, 0.71) !important;
  background: rgba(210, 210, 210, 0.71) !important;
  color: #123159 !important;
}

.hover.bg-default:before,
[title]:after {
  border-top-color: rgba(230, 230, 230, 0.71);
}

.hover.left.bg-default:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: rgba(230, 230, 230, 0.71);
}

.hover.right.bg-default:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: rgba(230, 230, 230, 0.71);
}

.hover.bottom.bg-default:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: rgba(230, 230, 230, 0.71);
}

nav.bg-success .item .sub li a {
  background: #5CB85C;
}

nav.bg-success .item .sub li a:hover {
  background: #439f43;
}

footer.bg-success li a,
nav.bg-success li a,
ul.bg-success li a {
  color: #fff !important;
}

.hover.bg-success:after,
.list-group.striped.success :nth-child(odd),
.card.success,
.alert.success,
.bg-success {
  background: -owg-#5CB85C !important;
  background: -webkit-#5CB85C !important;
  background: -moz-#5CB85C !important;
  background: -o-#5CB85C !important;
  background: #5CB85C !important;
  color: #fff !important;
}

.top-bar.bg-success,
.bg-success.copyright {
  background: -owg-#48a448 !important;
  background: -webkit-#48a448 !important;
  background: -moz-#48a448 !important;
  background: -o-#48a448 !important;
  background: #48a448 !important;
  color: #fff !important;
}

.hover.bg-success:before,
[title]:after {
  border-top-color: #5CB85C;
}

.hover.left.bg-success:before,
[title]:after {
  border-top-color: transparent !important;
  border-left-color: #5CB85C;
}

.hover.right.bg-success:before,
[title]:after {
  border-top-color: transparent !important;
  border-right-color: #5CB85C;
}

.hover.bottom.bg-success:before,
[title]:after {
  border-top-color: transparent !important;
  border-bottom-color: #5CB85C;
}

.mr-0 {
  margin: 0px !important;
}

.mrt-0 {
  margin-top: 0px !important;
}

.mrl-0 {
  margin-left: 0px !important;
}

.mrr-0 {
  margin-right: 0px !important;
}

.mrb-0 {
  margin-bottom: 0px !important;
}

.pd-0 {
  padding: 0px !important;
}

.pdt-0 {
  padding-top: 0px !important;
}

.pdl-0 {
  padding-left: 0px !important;
}

.pdr-0 {
  padding-right: 0px !important;
}

.pdb-0 {
  padding-bottom: 0px !important;
}

.mr-1 {
  margin: 1px !important;
}

.mrt-1 {
  margin-top: 1px !important;
}

.mrl-1 {
  margin-left: 1px !important;
}

.mrr-1 {
  margin-right: 1px !important;
}

.mrb-1 {
  margin-bottom: 1px !important;
}

.pd-1 {
  padding: 1px !important;
}

.pdt-1 {
  padding-top: 1px !important;
}

.pdl-1 {
  padding-left: 1px !important;
}

.pdr-1 {
  padding-right: 1px !important;
}

.pdb-1 {
  padding-bottom: 1px !important;
}

.mr-2 {
  margin: 2px !important;
}

.mrt-2 {
  margin-top: 2px !important;
}

.mrl-2 {
  margin-left: 2px !important;
}

.mrr-2 {
  margin-right: 2px !important;
}

.mrb-2 {
  margin-bottom: 2px !important;
}

.pd-2 {
  padding: 2px !important;
}

.pdt-2 {
  padding-top: 2px !important;
}

.pdl-2 {
  padding-left: 2px !important;
}

.pdr-2 {
  padding-right: 2px !important;
}

.pdb-2 {
  padding-bottom: 2px !important;
}

.mr-3 {
  margin: 3px !important;
}

.mrt-3 {
  margin-top: 3px !important;
}

.mrl-3 {
  margin-left: 3px !important;
}

.mrr-3 {
  margin-right: 3px !important;
}

.mrb-3 {
  margin-bottom: 3px !important;
}

.pd-3 {
  padding: 3px !important;
}

.pdt-3 {
  padding-top: 3px !important;
}

.pdl-3 {
  padding-left: 3px !important;
}

.pdr-3 {
  padding-right: 3px !important;
}

.pdb-3 {
  padding-bottom: 3px !important;
}

.mr-4 {
  margin: 4px !important;
}

.mrt-4 {
  margin-top: 4px !important;
}

.mrl-4 {
  margin-left: 4px !important;
}

.mrr-4 {
  margin-right: 4px !important;
}

.mrb-4 {
  margin-bottom: 4px !important;
}

.pd-4 {
  padding: 4px !important;
}

.pdt-4 {
  padding-top: 4px !important;
}

.pdl-4 {
  padding-left: 4px !important;
}

.pdr-4 {
  padding-right: 4px !important;
}

.pdb-4 {
  padding-bottom: 4px !important;
}

.mr-5 {
  margin: 5px !important;
}

.mrt-5 {
  margin-top: 5px !important;
}

.mrl-5 {
  margin-left: 5px !important;
}

.mrr-5 {
  margin-right: 5px !important;
}

.mrb-5 {
  margin-bottom: 5px !important;
}

.pd-5 {
  padding: 5px !important;
}

.pdt-5 {
  padding-top: 5px !important;
}

.pdl-5 {
  padding-left: 5px !important;
}

.pdr-5 {
  padding-right: 5px !important;
}

.pdb-5 {
  padding-bottom: 5px !important;
}

.mr-6 {
  margin: 6px !important;
}

.mrt-6 {
  margin-top: 6px !important;
}

.mrl-6 {
  margin-left: 6px !important;
}

.mrr-6 {
  margin-right: 6px !important;
}

.mrb-6 {
  margin-bottom: 6px !important;
}

.pd-6 {
  padding: 6px !important;
}

.pdt-6 {
  padding-top: 6px !important;
}

.pdl-6 {
  padding-left: 6px !important;
}

.pdr-6 {
  padding-right: 6px !important;
}

.pdb-6 {
  padding-bottom: 6px !important;
}

.mr-7 {
  margin: 7px !important;
}

.mrt-7 {
  margin-top: 7px !important;
}

.mrl-7 {
  margin-left: 7px !important;
}

.mrr-7 {
  margin-right: 7px !important;
}

.mrb-7 {
  margin-bottom: 7px !important;
}

.pd-7 {
  padding: 7px !important;
}

.pdt-7 {
  padding-top: 7px !important;
}

.pdl-7 {
  padding-left: 7px !important;
}

.pdr-7 {
  padding-right: 7px !important;
}

.pdb-7 {
  padding-bottom: 7px !important;
}

.mr-8 {
  margin: 8px !important;
}

.mrt-8 {
  margin-top: 8px !important;
}

.mrl-8 {
  margin-left: 8px !important;
}

.mrr-8 {
  margin-right: 8px !important;
}

.mrb-8 {
  margin-bottom: 8px !important;
}

.pd-8 {
  padding: 8px !important;
}

.pdt-8 {
  padding-top: 8px !important;
}

.pdl-8 {
  padding-left: 8px !important;
}

.pdr-8 {
  padding-right: 8px !important;
}

.pdb-8 {
  padding-bottom: 8px !important;
}

.mr-9 {
  margin: 9px !important;
}

.mrt-9 {
  margin-top: 9px !important;
}

.mrl-9 {
  margin-left: 9px !important;
}

.mrr-9 {
  margin-right: 9px !important;
}

.mrb-9 {
  margin-bottom: 9px !important;
}

.pd-9 {
  padding: 9px !important;
}

.pdt-9 {
  padding-top: 9px !important;
}

.pdl-9 {
  padding-left: 9px !important;
}

.pdr-9 {
  padding-right: 9px !important;
}

.pdb-9 {
  padding-bottom: 9px !important;
}

.mr-10 {
  margin: 10px !important;
}

.mrt-10 {
  margin-top: 10px !important;
}

.mrl-10 {
  margin-left: 10px !important;
}

.mrr-10 {
  margin-right: 10px !important;
}

.mrb-10 {
  margin-bottom: 10px !important;
}

.pd-10 {
  padding: 10px !important;
}

.pdt-10 {
  padding-top: 10px !important;
}

.pdl-10 {
  padding-left: 10px !important;
}

.pdr-10 {
  padding-right: 10px !important;
}

.pdb-10 {
  padding-bottom: 10px !important;
}

.mr-11 {
  margin: 11px !important;
}

.mrt-11 {
  margin-top: 11px !important;
}

.mrl-11 {
  margin-left: 11px !important;
}

.mrr-11 {
  margin-right: 11px !important;
}

.mrb-11 {
  margin-bottom: 11px !important;
}

.pd-11 {
  padding: 11px !important;
}

.pdt-11 {
  padding-top: 11px !important;
}

.pdl-11 {
  padding-left: 11px !important;
}

.pdr-11 {
  padding-right: 11px !important;
}

.pdb-11 {
  padding-bottom: 11px !important;
}

.mr-12 {
  margin: 12px !important;
}

.mrt-12 {
  margin-top: 12px !important;
}

.mrl-12 {
  margin-left: 12px !important;
}

.mrr-12 {
  margin-right: 12px !important;
}

.mrb-12 {
  margin-bottom: 12px !important;
}

.pd-12 {
  padding: 12px !important;
}

.pdt-12 {
  padding-top: 12px !important;
}

.pdl-12 {
  padding-left: 12px !important;
}

.pdr-12 {
  padding-right: 12px !important;
}

.pdb-12 {
  padding-bottom: 12px !important;
}

.mr-13 {
  margin: 13px !important;
}

.mrt-13 {
  margin-top: 13px !important;
}

.mrl-13 {
  margin-left: 13px !important;
}

.mrr-13 {
  margin-right: 13px !important;
}

.mrb-13 {
  margin-bottom: 13px !important;
}

.pd-13 {
  padding: 13px !important;
}

.pdt-13 {
  padding-top: 13px !important;
}

.pdl-13 {
  padding-left: 13px !important;
}

.pdr-13 {
  padding-right: 13px !important;
}

.pdb-13 {
  padding-bottom: 13px !important;
}

.mr-14 {
  margin: 14px !important;
}

.mrt-14 {
  margin-top: 14px !important;
}

.mrl-14 {
  margin-left: 14px !important;
}

.mrr-14 {
  margin-right: 14px !important;
}

.mrb-14 {
  margin-bottom: 14px !important;
}

.pd-14 {
  padding: 14px !important;
}

.pdt-14 {
  padding-top: 14px !important;
}

.pdl-14 {
  padding-left: 14px !important;
}

.pdr-14 {
  padding-right: 14px !important;
}

.pdb-14 {
  padding-bottom: 14px !important;
}

.mr-15 {
  margin: 15px !important;
}

.mrt-15 {
  margin-top: 15px !important;
}

.mrl-15 {
  margin-left: 15px !important;
}

.mrr-15 {
  margin-right: 15px !important;
}

.mrb-15 {
  margin-bottom: 15px !important;
}

.pd-15 {
  padding: 15px !important;
}

.pdt-15 {
  padding-top: 15px !important;
}

.pdl-15 {
  padding-left: 15px !important;
}

.pdr-15 {
  padding-right: 15px !important;
}

.pdb-15 {
  padding-bottom: 15px !important;
}

.mr-16 {
  margin: 16px !important;
}

.mrt-16 {
  margin-top: 16px !important;
}

.mrl-16 {
  margin-left: 16px !important;
}

.mrr-16 {
  margin-right: 16px !important;
}

.mrb-16 {
  margin-bottom: 16px !important;
}

.pd-16 {
  padding: 16px !important;
}

.pdt-16 {
  padding-top: 16px !important;
}

.pdl-16 {
  padding-left: 16px !important;
}

.pdr-16 {
  padding-right: 16px !important;
}

.pdb-16 {
  padding-bottom: 16px !important;
}

.mr-17 {
  margin: 17px !important;
}

.mrt-17 {
  margin-top: 17px !important;
}

.mrl-17 {
  margin-left: 17px !important;
}

.mrr-17 {
  margin-right: 17px !important;
}

.mrb-17 {
  margin-bottom: 17px !important;
}

.pd-17 {
  padding: 17px !important;
}

.pdt-17 {
  padding-top: 17px !important;
}

.pdl-17 {
  padding-left: 17px !important;
}

.pdr-17 {
  padding-right: 17px !important;
}

.pdb-17 {
  padding-bottom: 17px !important;
}

.mr-18 {
  margin: 18px !important;
}

.mrt-18 {
  margin-top: 18px !important;
}

.mrl-18 {
  margin-left: 18px !important;
}

.mrr-18 {
  margin-right: 18px !important;
}

.mrb-18 {
  margin-bottom: 18px !important;
}

.pd-18 {
  padding: 18px !important;
}

.pdt-18 {
  padding-top: 18px !important;
}

.pdl-18 {
  padding-left: 18px !important;
}

.pdr-18 {
  padding-right: 18px !important;
}

.pdb-18 {
  padding-bottom: 18px !important;
}

.mr-19 {
  margin: 19px !important;
}

.mrt-19 {
  margin-top: 19px !important;
}

.mrl-19 {
  margin-left: 19px !important;
}

.mrr-19 {
  margin-right: 19px !important;
}

.mrb-19 {
  margin-bottom: 19px !important;
}

.pd-19 {
  padding: 19px !important;
}

.pdt-19 {
  padding-top: 19px !important;
}

.pdl-19 {
  padding-left: 19px !important;
}

.pdr-19 {
  padding-right: 19px !important;
}

.pdb-19 {
  padding-bottom: 19px !important;
}

.mr-20 {
  margin: 20px !important;
}

.mrt-20 {
  margin-top: 20px !important;
}

.mrl-20 {
  margin-left: 20px !important;
}

.mrr-20 {
  margin-right: 20px !important;
}

.mrb-20 {
  margin-bottom: 20px !important;
}

.pd-20 {
  padding: 20px !important;
}

.pdt-20 {
  padding-top: 20px !important;
}

.pdl-20 {
  padding-left: 20px !important;
}

.pdr-20 {
  padding-right: 20px !important;
}

.pdb-20 {
  padding-bottom: 20px !important;
}

.fs-9 {
  font-size: 9px !important;
}

.fs-10 {
  font-size: 10px !important;
}

.fs-11 {
  font-size: 11px !important;
}

.fs-12 {
  font-size: 12px !important;
}

.fs-13 {
  font-size: 13px !important;
}

.fs-14 {
  font-size: 14px !important;
}

.fs-15 {
  font-size: 15px !important;
}

.fs-16 {
  font-size: 16px !important;
}

.fs-17 {
  font-size: 17px !important;
}

.fs-18 {
  font-size: 18px !important;
}

.fs-19 {
  font-size: 19px !important;
}

.fs-20 {
  font-size: 20px !important;
}

.fs-21 {
  font-size: 21px !important;
}

.fs-22 {
  font-size: 22px !important;
}

.fs-23 {
  font-size: 23px !important;
}

.fs-24 {
  font-size: 24px !important;
}

.fs-25 {
  font-size: 25px !important;
}

.fs-26 {
  font-size: 26px !important;
}

.fs-27 {
  font-size: 27px !important;
}

.fs-28 {
  font-size: 28px !important;
}

.fs-29 {
  font-size: 29px !important;
}

.fs-30 {
  font-size: 30px !important;
}

.fs-31 {
  font-size: 31px !important;
}

.fs-32 {
  font-size: 32px !important;
}

.fs-33 {
  font-size: 33px !important;
}

.fs-34 {
  font-size: 34px !important;
}

.fs-35 {
  font-size: 35px !important;
}

.fs-36 {
  font-size: 36px !important;
}

.fs-37 {
  font-size: 37px !important;
}

.fs-38 {
  font-size: 38px !important;
}

.fs-39 {
  font-size: 39px !important;
}

.fs-40 {
  font-size: 40px !important;
}

.vedio {
  border: 0.0625rem solid #ececec;
  padding: 0.5rem 0;
}

img .center {
  margin: 0 auto;
}

.img-responsive,
.img-bordered,
.img-circle {
  border-radius: 0.1875rem;
  display: block;
  max-width: 100%;
  height: auto;
}

.img-bordered,
.img-circle {
  border: 3px solid #cacaca;
}

.img-circle {
  border-radius: 50%;
}

.hide,
.hidden {
  display: none;
}

.innerGap {
  padding: 10px;
}

.space-between {
  -ms-flex-pack: justify;
      justify-content: space-between;
}

.display-flex,
.flex-left {
  display: -ms-flexbox;
  display: flex;
}

.align-items-center {
  -ms-flex-align: center;
      align-items: center;
}

.justify-content-center {
  -ms-flex-pack: center;
      justify-content: center;
}

.space-around {
  -ms-flex-pack: distribute;
      justify-content: space-around;
}

.justify-content-end {
  -ms-flex-pack: end;
      justify-content: flex-end;
}

.space-between {
  -ms-flex-pack: justify;
      justify-content: space-between;
}

.right-gap {
  margin-right: 5px;
}

.left-gap {
  margin-left: 5px;
}

.text-center {
  text-align: center;
}

.bg-white {
  background: white !important;
}

.text-right {
  text-align: right !important;
}

.text-left {
  text-align: left !important;
}

.text-justify {
  text-align: justify;
}

strong,
.strong {
  font-weight: bold;
}

.gutter {
  margin-top: 20px;
}

.right {
  margin-left: auto !important;
  display: inline;
  float: right;
}

.caret {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 2px;
  vertical-align: middle;
  border-top: 4px dashed;
  border-top: 4px solid\9;
  border-right: 4px solid transparent;
  border-left: 4px solid transparent;
}

.no-shadow {
  box-shadow: none !important;
}

.full-width {
  -ms-flex: 1 100%;
      flex: 1 100%;
}

.flex-column {
  -ms-flex-direction: column;
      flex-direction: column;
}

.clearfix {
  *zoom: 1;
}

.clearfix:before,
.clearfix:after {
  display: table;
  content: '';
  line-height: 0;
}

.clearfix:after {
  clear: both;
}

.break {
  -ms-flex-preferred-size: 100%;
      flex-basis: 100%;
  width: 0px;
  height: 0px;
  overflow: hidden;
}

.custom_column_style {
  box-shadow: 0 0 1px #c5c5c5;
}

.no-margin {
  margin-top: -1.5rem;
}

.gap,
.griding {
  margin-bottom: 1.25rem;
  min-height: 1.875rem;
  margin-right: 0.3125rem;
  box-shadow: 2px 5px 9px rgba(0, 0, 0, 0.27);
}

.markup-pre-button {
  color: rgba(64, 64, 64, 0.74);
}

.with-border {
  border: 1px solid #dedede !important;
}

.with-shadow {
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

.show-block {
  display: block !important;
}

.bg-transparent {
  background: transparent !important;
}

.hover[class*="bg-"] {
  background: transparent !important;
  color: #337AB7 !important;
}

.hover.bg-default:after {
  background: #f1f1f1 !important;
}

.fixed {
  position: fixed;
}

.flex-left {
  -ms-flex-pack: end;
      justify-content: flex-end;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
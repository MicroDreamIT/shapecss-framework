@import url(https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css);@import url(https://fonts.googleapis.com/css?family=Roboto+Slab:100,300,400,700);/*!
 * ShapeCss 2.0
 * Copyright 2016-2017 MicroDreamIT.
 *http://microdreamit.com
 * Licensed under MIT (https://github.com/MicroDreamIT/Shapecss/blob/master/LICENSE)
 */





.progress-bar {
  background: rgba(236, 236, 236, 0.6);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
}

.progress-bar-info-stripe {
  background: repeating-linear-gradient(45deg, #5BC0DE, #5BC0DE 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  -webkit-animation-name: popup_text;
          animation-name: popup_text;
  -webkit-animation-duration: 2s;
          animation-duration: 2s;
}

.progress-bar-success-stripe {
  background: repeating-linear-gradient(45deg, #5CB85C, #5CB85C 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  -webkit-animation-name: popup_text;
          animation-name: popup_text;
  -webkit-animation-duration: 2s;
          animation-duration: 2s;
}

.progress-bar-primary-stripe {
  background: repeating-linear-gradient(45deg, #337AB7, #337AB7 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  -webkit-animation-name: popup_text;
          animation-name: popup_text;
  -webkit-animation-duration: 2s;
          animation-duration: 2s;
}

.progress-bar-warning-stripe {
  background: repeating-linear-gradient(45deg, #F0AD4E, #F0AD4E 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  -webkit-animation-name: popup_text;
          animation-name: popup_text;
  -webkit-animation-duration: 2s;
          animation-duration: 2s;
}

.progress-bar-danger-stripe {
  background: repeating-linear-gradient(45deg, #D9534F, #D9534F 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  -webkit-animation-name: popup_text;
          animation-name: popup_text;
  -webkit-animation-duration: 2s;
          animation-duration: 2s;
}

.progress-bar-default-stripe {
  background: repeating-linear-gradient(45deg, #dedede, #dedede 10px, #eee 10px, #d2d2d2 20px);
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
  -webkit-animation-name: popup_text;
          animation-name: popup_text;
  -webkit-animation-duration: 2s;
          animation-duration: 2s;
}

@-webkit-keyframes popup_text {
  0% {
    font-size: 14px;
  }

  50% {
    font-size: 18px;
    color: #D9534F;
  }

  100% {
    font-size: 14px;
  }
}

* {
  padding: 0;
  margin: 0;
}

html,
body {
  width: 100%;
  height: 100%;
  text-rendering: optimizeLegibility;
  text-rendering: geometricPrecision;
  font-smooth: always;
  font-smoothing: antialiased;
  -moz-font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;
}

body {
  font-family: 'Roboto Slab', serif;
}

strong {
  font-weight: 700;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  font-weight: 400;
}

body,
p {
  font-weight: 300;
  font-size: 0.9375rem;
}

ul,
li {
  padding: 0;
  margin: 0;
}

a {
  text-decoration: none;
}

hr {
  border-color: rgba(255, 255, 255, 0.29);
  margin: 2rem 0;
}

button {
  background: transparent;
  border: 0.0625rem solid #dedede;
  cursor: pointer;
}

p {
  line-height: 1.6;
  padding: 0.125rem 0;
  margin: 0;
}

footer {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.pagination {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding-left: 0;
  margin: 1.25rem 0;
  border-radius: 0.25rem;
}

.pagination.right {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  float: none;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end;
  margin-left: none !important;
}

.pagination.center {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

.pagination .active a {
  color: #fff;
  cursor: pointer;
  background-color: #337ab7;
  border-color: #337ab7;
}

.pagination .active a:hover {
  font-weight: normal;
  color: #fff;
  cursor: pointer;
  background-color: #337ab7;
  border-color: #337ab7;
}

.pagination .disabled a {
  color: grey;
  opacity: 0.7;
  cursor: not-allowed;
  pointer-events: none;
}

.pagination li {
  list-style: none;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.pagination li:first-child a {
  border-radius: 3px 0px 0px 3px;
}

.pagination li:last-child a {
  border-radius: 0px 3px 3px 0px;
}

.pagination li a,
.pagination li span {
  float: left;
  padding: 6px 12px;
  line-height: 1.42857143;
  color: #337ab7;
  text-decoration: none;
  background: transparent;
  border: 1px solid #ddd;
}

.pagination li a:focus,
.pagination li span:focus {
  background: #337ab7;
  color: #fff;
  border: 1px solid #337ab7;
}

.pagination li a:hover,
.pagination li span:hover {
  color: #23527c;
  background-color: #eee;
  border-color: #ddd;
}

.progress {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  height: 25px;
  margin: 20px 0;
  background-color: rgba(236, 236, 236, 0.34);
  border-radius: 4px;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
}

.progress .progress-bar {
  border-radius: 4px 0px 0px 4px;
  float: left;
  width: 0;
  height: 100%;
  font-size: 12px;
  line-height: 25px;
  color: #000;
  font-weight: bold;
  text-align: center;
  box-shadow: inset 2px 1px 2px 1px rgba(0, 0, 0, 0.15);
  transition: width 0.6s ease;
}

.progress .progress-bar span {
  line-height: 25px;
  font-weight: bold;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

.progress-bar:not(:first-child) {
  border-radius: 0;
}

.progress.line {
  height: 5px !important;
}

.row {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  margin-bottom: 0.3125rem;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.container-full {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.container-flex {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  padding: 50px;
  padding: 1.25rem;
}

@media (max-width: 480px) {
  .container {
    width: 90%;
  }
}

@media (max-width: 767px) {
  .container {
    width: 90%;
  }
}

@media (min-width: 768px) and (max-width: 979px) {
  .container {
    width: 90%;
  }
}

@media (min-width: 1200px) {
  .container {
    width: 1170px;
  }
}

a.button,
button.default,
button.info,
button.success,
button.danger,
button.warning,
button.dark,
button.primary {
  font-size: 14px;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  outline: none;
  cursor: pointer;
  margin: 3px;
  border: none;
  border-radius: 2px;
  transition: 0.3s ease-out;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button:hover,
button.default:hover,
button.info:hover,
button.success:hover,
button.danger:hover,
button.warning:hover,
button.dark:hover,
button.primary:hover {
  -webkit-transform: translateY(-2px);
  transform: translateY(-2px);
}

a.button:active,
button.default:active,
button.info:active,
button.success:active,
button.danger:active,
button.warning:active,
button.dark:active,
button.primary:active {
  -webkit-transform: translateY(3px);
  transform: translateY(3px);
}

a.button.info,
button.info,
button.info,
button.circle.info {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #5BC0DE;
  color: #fff;
}

a.button.info:hover,
button.info:hover,
button.info:hover,
button.circle.info:hover {
  background: #42a7c5;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.dark,
button.dark,
button.dark,
button.circle.dark {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #123159;
  color: #fff;
}

a.button.dark:hover,
button.dark:hover,
button.dark:hover,
button.circle.dark:hover {
  background: #001840;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.danger,
button.danger,
button.danger,
button.circle.danger {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #D9534F;
  color: #fff;
}

a.button.danger:hover,
button.danger:hover,
button.danger:hover,
button.circle.danger:hover {
  background: #c03a36;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.warning,
button.warning,
button.warning,
button.circle.warning {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #F0AD4E;
  color: #fff;
}

a.button.warning:hover,
button.warning:hover,
button.warning:hover,
button.circle.warning:hover {
  background: #d79435;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.primary,
button.primary,
button.primary,
button.circle.primary {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #337AB7;
  color: #fff;
}

a.button.primary:hover,
button.primary:hover,
button.primary:hover,
button.circle.primary:hover {
  background: #1a619e;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.default,
button.default,
button.default,
button.circle.default {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: rgba(230, 230, 230, 0.71);
  color: #303030;
}

a.button.default:hover,
button.default:hover,
button.default:hover,
button.circle.default:hover {
  background: rgba(205, 205, 205, 0.71);
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.success,
button.success,
button.success,
button.circle.success {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  background: #5CB85C;
  color: #fff;
}

a.button.success:hover,
button.success:hover,
button.success:hover,
button.circle.success:hover {
  background: #439f43;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

a.button.l,
button.l {
  padding: 15px 50px;
  font-size: 16px;
}

a.button.m,
button.m {
  padding: 8px 8px;
  font-size: 14px;
}

a.button.s,
button.s {
  padding: 3px 5px;
  margin: 3px;
  border-radius: 3px;
  font-size: 12px;
  font-weight: normal;
}

a.button.block,
button.block {
  display: block !important;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  text-align: center;
  padding: 8px 0;
  width: 100%;
}

a.button.disabled,
button.disabled {
  opacity: 0.4;
  cursor: no-drop;
  color: #4C4C4C;
}

a.button.close,
button.close {
  border: none;
}

a.button.close:after,
button.close:after {
  content: '\2613';
}

a.button.rounded,
button.rounded {
  padding-left: 30px !important;
  padding-right: 30px !important;
  border-radius: 24px;
}

a.button.no-radius,
button.no-radius {
  border-radius: 0;
}

.button-group {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  min-height: 1px;
  vertical-align: middle;
  margin: 3px 0px;
  border: 1px solid rgba(128, 128, 128, 0.22);
  padding-left: 5px;
}

.button-group a.button,
.button-group button {
  margin-left: -2px;
  border-radius: 0;
  box-shadow: none;
}

.button-group a.button:first-child,
.button-group button:first-child {
  border-radius: 3px 0 0 3px;
}

.button-group a.button:last-child,
.button-group button:last-child {
  border-radius: 0 3px 3px 0;
}

form {
  display: block;
  padding: 0.625rem;
}

form-element,
.form-element {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  margin-bottom: 0.375rem;
}

label {
  padding: 0.125rem;
}

.input-item {
  height: 1.875rem;
  width: 100%;
  color: #4d4e4d;
  border: 1px solid #dedede;
  border-radius: 3px;
  padding-left: 0.3125rem;
}

.input-item:focus {
  background: rgba(228, 226, 226, 0.62);
  border: 1px solid rgba(169, 168, 168, 0.7);
  outline: none;
  transition: all 0.2s ease-in;
}

.inline {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
}

.inline button {
  margin: 0;
}

.inline .input-item {
  margin-right: 0.625rem;
}

.inline .input-item:last-child {
  margin-right: 0;
}

textarea.input-item {
  min-height: 7.5rem;
  width: 100%;
}

.side-by .input-item {
  margin-right: 0 !important;
  border-radius: 0;
}

.side-by label {
  border-radius: 0;
  height: 1.46875rem;
  color: #4a4a4a;
  padding-right: 4px;
}

.side-by label.info {
  background: #5BC0DE;
  color: #fff;
}

.side-by label.dark {
  background: #123159;
  color: #fff;
}

.side-by label.danger {
  background: #D9534F;
  color: #fff;
}

.side-by label.warning {
  background: #F0AD4E;
  color: #fff;
}

.side-by label.primary {
  background: #337AB7;
  color: #fff;
}

.side-by label.default {
  background: rgba(230, 230, 230, 0.71);
  color: #123159;
  background: #dedede !important;
}

.side-by label.success {
  background: #5CB85C;
  color: #fff;
}

label {
  padding: 0.2125rem;
  white-space: nowrap;
  color: #5d5d5d;
}

.input-item {
  background: transparent;
}

.input-check,
.input-radio {
  position: static;
}

.has-info {
  color: #5BC0DE;
}

select[class^="input-"].info,
textarea.info,
input[class^="input"].info {
  border: 1px solid #5BC0DE !important;
  color: #000;
}

select[class^="input-"].info:focus,
textarea.info:focus,
input[class^="input"].info:focus {
  border: 1px solid #5BC0DE !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-dark {
  color: #123159;
}

select[class^="input-"].dark,
textarea.dark,
input[class^="input"].dark {
  border: 1px solid #123159 !important;
  color: #000;
}

select[class^="input-"].dark:focus,
textarea.dark:focus,
input[class^="input"].dark:focus {
  border: 1px solid #123159 !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-error {
  color: #D9534F;
}

select[class^="input-"].error,
textarea.error,
input[class^="input"].error {
  border: 1px solid #D9534F !important;
  color: #000;
}

select[class^="input-"].error:focus,
textarea.error:focus,
input[class^="input"].error:focus {
  border: 1px solid #D9534F !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-warning {
  color: #F0AD4E;
}

select[class^="input-"].warning,
textarea.warning,
input[class^="input"].warning {
  border: 1px solid #F0AD4E !important;
  color: #000;
}

select[class^="input-"].warning:focus,
textarea.warning:focus,
input[class^="input"].warning:focus {
  border: 1px solid #F0AD4E !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-primary {
  color: #337AB7;
}

select[class^="input-"].primary,
textarea.primary,
input[class^="input"].primary {
  border: 1px solid #337AB7 !important;
  color: #000;
}

select[class^="input-"].primary:focus,
textarea.primary:focus,
input[class^="input"].primary:focus {
  border: 1px solid #337AB7 !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-default {
  color: rgba(230, 230, 230, 0.71);
}

select[class^="input-"].default,
textarea.default,
input[class^="input"].default {
  border: 1px solid rgba(230, 230, 230, 0.71) !important;
  color: #000;
}

select[class^="input-"].default:focus,
textarea.default:focus,
input[class^="input"].default:focus {
  border: 1px solid rgba(230, 230, 230, 0.71) !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.has-success {
  color: #5CB85C;
}

select[class^="input-"].success,
textarea.success,
input[class^="input"].success {
  border: 1px solid #5CB85C !important;
  color: #000;
}

select[class^="input-"].success:focus,
textarea.success:focus,
input[class^="input"].success:focus {
  border: 1px solid #5CB85C !important;
}

[class^="input"].disabled {
  background: rgba(128, 128, 128, 0.11);
}

.input-dropdown {
  height: 2.1875rem;
}

.help-block {
  color: #D9534F;
}

@media (max-width: 768px) {
  .input-item {
    margin-bottom: 5px;
    width: 100%;
  }

  .inline {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
  }

  .side-by label {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    border-right: 2px solid rgba(128, 128, 128, 0);
  }

  .form-element {
    display: block !important;
  }

  button {
    display: block;
  }
}

.inline.side-by select.input-item {
  height: 1.6875rem !important;
}

input[type=checkbox],
input[type=radio] {
  margin: 0.3125rem;
  cursor: pointer;
}

input[type=checkbox]:checked + :focus,
input[type=radio]:checked + :focus {
  outline: none;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100vh;
  overflow: auto;
  background: rgba(14, 14, 14, 0.82);
}

.modal.active {
  display: block;
}

.modal-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 0;
  width: 80%;
  position: relative;
  border-radius: 2px;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
  -webkit-animation-name: fadein;
  -webkit-animation-duration: 0.6s;
  animation-name: fadein;
  -webkit-animation-duration: .6s;
          animation-duration: .6s;
}

.modal-content .modal-body {
  padding: 10px;
  border-bottom: 1px solid #fff5f5;
  color: #525252;
}

.modal-content .modal-header {
  padding: 9px;
  background: #dedede;
  color: #123159;
  border-bottom: 2px solid #d6d6d6;
}

.modal-content .modal-header button.close {
  cursor: pointer !important;
  float: right;
  height: 0.75rem;
  width: 0.75rem;
  margin-top: 0.35625rem;
  margin-right: -0.0625rem;
}

.modal-content .modal-header button.close:after {
  position: absolute;
  right: 9px;
  top: 9px;
  font-size: 14px;
  color: rgba(210, 210, 210, 0.5);
}

.modal-content .modal-footer {
  min-height: 38px;
  padding: 9px;
}

.modal-content .modal-footer button .right {
  float: right;
  margin-right: 3px;
}

.link-right {
  float: right;
  margin-right: 10px;
}

.link-left {
  float: left;
  margin-left: 10px;
  padding: 12px 8px;
  font-size: 15px;
  min-width: 150px;
  margin-right: 10px;
  outline: none;
  text-decoration: none;
  border: 1px solid rgba(238, 238, 238, 0.74);
  transition: all 0.5s;
}

.modal.small .modal-content {
  width: 20%;
}

.modal.medium .modal-content {
  width: 35%;
}

.modal.large .modal-content {
  width: 50%;
}

.modal.extra-large .modal-content {
  width: 80%;
}

.modal.full-screen .modal-content {
  width: 100%;
  height: 100vh;
  margin: 0;
}

@keyframes fadein {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

/* Firefox < 16 */

/* Safari, Chrome and Opera > 12.1 */

@-webkit-keyframes fadein {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

/* Internet Explorer */

/* Opera < 12.1 */

@media all and (max-width: 768px) {
  .modal.small .modal-content {
    width: 55%;
  }

  .modal.medium .modal-content {
    width: 60%;
  }

  .modal.large .modal-content {
    width: 70%;
  }
}

#myInput {
  background-image: url("http://www.w3schools.com/css/searchicon.png");
  background-position: 0.625rem 0.75rem;
  background-repeat: no-repeat;
  font-size: 1rem;
  padding: 0.75rem 1.25rem 0.75rem 2.5rem;
  border: 0.0625rem solid #ddd;
  margin-bottom: 12px;
}

#myInput:focus {
  outline: none;
  border: 2px dashed #dedede;
}

#filter-items {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

#filter-items li a {
  border: 0.0625rem solid #ddd;
  margin-top: -0.0625rem;
  background-color: #f6f6f6;
  padding: 0.75rem;
  text-decoration: none;
  font-size: 1.125rem;
  color: #123159;
  display: block;
}

#filter-items li a.heading-title {
  background-color: #e2e2e2;
  cursor: default;
}

#filter-items li a:hover:not(.heading-title) {
  background-color: #eee;
}

#filter-items li a.heading-title.info {
  background-color: #5BC0DE;
  color: #fff;
}

#filter-items li a.heading-title.dark {
  background-color: #123159;
  color: #fff;
}

#filter-items li a.heading-title.danger {
  background-color: #D9534F;
  color: #fff;
}

#filter-items li a.heading-title.warning {
  background-color: #F0AD4E;
  color: #fff;
}

#filter-items li a.heading-title.primary {
  background-color: #337AB7;
  color: #fff;
}

#filter-items li a.heading-title.default {
  color: gray;
}

#filter-items li a.heading-title.success {
  background-color: #5CB85C;
  color: #fff;
}

.breadcrumb {
  background: #dedede;
}

.breadcrumb li {
  list-style: none;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.breadcrumb li a {
  padding: 10px 3px;
  color: rgba(230, 230, 230, 0.71);
  font-weight: 400;
}

.breadcrumb li a:after {
  content: ' /';
  color: #4C4C4C;
}

.breadcrumb.info {
  background-color: #5BC0DE;
}

.breadcrumb.info li a {
  color: #fff;
}

.breadcrumb.info li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.info li a:hover {
  color: #4C4C4C;
}

.breadcrumb.dark {
  background-color: #123159;
}

.breadcrumb.dark li a {
  color: #fff;
}

.breadcrumb.dark li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.dark li a:hover {
  color: #4C4C4C;
}

.breadcrumb.danger {
  background-color: #D9534F;
}

.breadcrumb.danger li a {
  color: #fff;
}

.breadcrumb.danger li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.danger li a:hover {
  color: #4C4C4C;
}

.breadcrumb.warning {
  background-color: #F0AD4E;
}

.breadcrumb.warning li a {
  color: #fff;
}

.breadcrumb.warning li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.warning li a:hover {
  color: #4C4C4C;
}

.breadcrumb.primary {
  background-color: #337AB7;
}

.breadcrumb.primary li a {
  color: #fff;
}

.breadcrumb.primary li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.primary li a:hover {
  color: #4C4C4C;
}

.breadcrumb.default {
  background-color: rgba(230, 230, 230, 0.71);
}

.breadcrumb.default li a {
  color: #000;
}

.breadcrumb.default li a:after {
  content: ' /';
  color: #000;
}

.breadcrumb.default li a:hover {
  color: #4C4C4C;
}

.breadcrumb.success {
  background-color: #5CB85C;
}

.breadcrumb.success li a {
  color: #fff;
}

.breadcrumb.success li a:after {
  content: ' /';
  color: #fff;
}

.breadcrumb.success li a:hover {
  color: #4C4C4C;
}

.breadcrumb li:last-child a::after,
.breadcrumb li:last-child a::before {
  content: none;
}

.breadcrumb .disabled {
  color: #dedede !important;
  pointer-events: none;
  cursor: not-allowed !important;
}

.badge {
  display: inline-block;
  padding: 0.25rem 0.5625rem;
  font-size: 0.6875rem;
  line-height: 1;
  color: #fff;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  background-color: #dedede;
  border-radius: 11px;
  margin-left: 3px;
  font-weight: 300;
  color: #4C4C4C;
}

.alert {
  white-space: nowrap;
  display: block;
  height: 50px;
  max-width: 500px;
  line-height: 50px;
  padding: 2px 30px;
  box-shadow: 0px 0px 9px 4px rgba(78, 78, 78, 0.22);
  background-color: #eee;
  font-size: 17px;
  font-weight: 400;
  color: #808080;
  border-radius: 3px;
  margin-bottom: 10px;
}

.alert .close {
  height: 0;
  width: 0;
}

.alert .close:after {
  content: '\00d7';
  position: absolute;
  right: 7px;
  top: -13px;
  font-size: 14px;
  cursor: pointer;
  height: 0;
}

[class^="alert"].round {
  border-radius: 30px;
}

.alert.top-right {
  position: absolute;
  top: 5%;
  right: 5%;
  z-index: 100;
}

.alert.top-left {
  position: absolute;
  top: 5%;
  left: 5%;
  z-index: 100;
}

.alert.bottom-right {
  position: absolute;
  bottom: 0%;
  right: 5%;
  z-index: 100;
}

.alert.bottom-left {
  position: absolute;
  bottom: 0%;
  left: 5%;
  z-index: 100;
}

.card {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  border-radius: 2px;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
  transition: all 0.25s ease;
  width: 100%;
}

.card img {
  display: block;
  width: 100%;
  border-bottom: 1px solid rgba(56, 56, 56, 0.12);
}

.card .header {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
}

.card .header .center {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.card .header-default {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  background: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.07);
}

.card .footer {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  border-top: 1px solid rgba(0, 0, 0, 0.06);
}

.card .footer .center {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.card .footer-default {
  padding: 0.625rem 0.5rem;
  margin-bottom: 0px;
  background-color: rgba(245, 245, 245, 0.51);
  background: none;
  border-top: 1px solid rgba(0, 0, 0, 0.07);
}

.card .body {
  padding: 0.9375rem;
}

.card:hover {
  -webkit-transform: translateY(-1px);
  transform: translateY(-1px);
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
}

.card.dark {
  background: -owg-linear-gradient(#123159, #0f294d);
  background: linear-gradient(#123159, #0f294d);
  color: white;
}

.header.primary {
  background: #337AB7;
  color: white;
}

.header.dark {
  background: #123159;
  color: white;
}

.header.warning {
  background: #5BC0DE;
  color: white;
}

.header.success {
  background: #5CB85C;
  color: white;
}

.header.info {
  background: #5BC0DE;
  color: white;
}

.header.danger {
  background: #D9534F;
  color: white;
}

div.box-layout {
  width: 1170px;
  margin: 0 auto;
}

div.box-layout .leftSide {
  width: 50%;
  float: left;
}

div.box-layout .rightSide {
  width: 50%;
  float: right;
}

ol {
  padding: 10px;
}

ol li {
  padding: 0;
  margin: 0;
}

ul li {
  list-style: none;
}

ul.with-bold li {
  list-style-type: disc;
}

.list-group {
  margin: 2px;
  padding: 0;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

.list-group .active {
  background: #dedede;
}

.list-group .active a {
  color: #fff;
}

.list-group .active a:hover {
  color: #fff;
}

.list-group li {
  position: relative;
  padding: 10px;
  margin-bottom: -1px;
  border: 1px solid #ddd;
}

.list-group li .badge,
.list-group li .badge-primary,
.list-group li .badge-success,
.list-group li .badge-info,
.list-group li .badge-warning,
.list-group li .badge-danger,
.list-group li .badge-dark,
.list-group li .badge-default {
  float: right;
}

.list-group li a {
  text-decoration: none;
  color: #4C4C4C;
  padding: 10px;
  transition: all 0.1s;
}

.list-group li a:hover {
  color: #6f6f6f;
  cursor: pointer;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  /*background-color: #f9f9f9;*/
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
  margin-left: 2px;
  border-radius: 2px;
}

.dropdown-content a {
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-content a:hover {
  background: rgba(255, 255, 255, 0.1);
}

.dropdown:hover .dropdown-content {
  display: block;
}

.dropdown:hover .dropbtn {
  background: transparent;
}

.dropdown-content.bg-default {
  background: #fff !important;
  color: #123159 !important;
}

.dropdown-content.bg-primary a,
.dropdown-content.bg-info a,
.dropdown-content.bg-dark a,
.dropdown-content.bg-warning a,
.dropdown-content.bg-danger a,
.dropdown-content.bg-success a {
  color: #fff !important;
}

.text-hover {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  min-height: 35px;
  padding-top: 5px;
}

.text-hover:hover .text {
  display: block;
}

.text-hover:hover .text.top {
  display: block;
}

.text-hover:hover .text.bottom {
  display: block;
}

.text.info {
  display: none;
  background: #5BC0DE;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #298eac;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
}

.text.info:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.info:before {
  position: absolute;
  left: -12px;
  color: #5BC0DE;
}

.text.top.info {
  display: none;
  background: #5BC0DE;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #298eac;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.top.info:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.info:before {
  color: #5BC0DE;
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.bottom.info {
  display: none;
  background: #5BC0DE;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #298eac;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.bottom.info:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.info:before {
  color: #5BC0DE;
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

.text.dark {
  display: none;
  background: #123159;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #000027;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
}

.text.dark:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.dark:before {
  position: absolute;
  left: -12px;
  color: #123159;
}

.text.top.dark {
  display: none;
  background: #123159;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #000027;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.top.dark:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.dark:before {
  color: #123159;
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.bottom.dark {
  display: none;
  background: #123159;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #000027;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.bottom.dark:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.dark:before {
  color: #123159;
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

.text.danger {
  display: none;
  background: #D9534F;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #a7211d;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
}

.text.danger:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.danger:before {
  position: absolute;
  left: -12px;
  color: #D9534F;
}

.text.top.danger {
  display: none;
  background: #D9534F;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #a7211d;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.top.danger:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.danger:before {
  color: #D9534F;
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.bottom.danger {
  display: none;
  background: #D9534F;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #a7211d;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.bottom.danger:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.danger:before {
  color: #D9534F;
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

.text.warning {
  display: none;
  background: #F0AD4E;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #be7b1c;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
}

.text.warning:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.warning:before {
  position: absolute;
  left: -12px;
  color: #F0AD4E;
}

.text.top.warning {
  display: none;
  background: #F0AD4E;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #be7b1c;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.top.warning:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.warning:before {
  color: #F0AD4E;
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.bottom.warning {
  display: none;
  background: #F0AD4E;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #be7b1c;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.bottom.warning:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.warning:before {
  color: #F0AD4E;
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

.text.primary {
  display: none;
  background: #337AB7;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #014885;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
}

.text.primary:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.primary:before {
  position: absolute;
  left: -12px;
  color: #337AB7;
}

.text.top.primary {
  display: none;
  background: #337AB7;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #014885;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.top.primary:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.primary:before {
  color: #337AB7;
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.bottom.primary {
  display: none;
  background: #337AB7;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #014885;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.bottom.primary:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.primary:before {
  color: #337AB7;
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

.text.default {
  display: none;
  background: rgba(230, 230, 230, 0.71);
  color: #fff;
  padding: 10px 7px;
  border: 0px solid rgba(180, 180, 180, 0.71);
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
  display: none;
  background: rgba(230, 230, 230, 0.71);
  color: #000 !important;
  padding: 10px 7px;
  border: 0px solid rgba(130, 130, 130, 0.71);
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
}

.text.default:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.default:before {
  position: absolute;
  left: -12px;
  color: rgba(230, 230, 230, 0.71);
}

.text.default:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.default {
  display: none;
  background: rgba(230, 230, 230, 0.71);
  color: #fff;
  padding: 10px 7px;
  border: 0px solid rgba(180, 180, 180, 0.71);
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
  display: none;
  background: rgba(230, 230, 230, 0.71);
  color: #000 !important;
  padding: 10px 7px;
  border: 0px solid rgba(130, 130, 130, 0.71);
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
}

.text.top.default:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.default:before {
  color: rgba(230, 230, 230, 0.71);
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.top.default:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.default {
  display: none;
  background: rgba(230, 230, 230, 0.71);
  color: #fff;
  padding: 10px 7px;
  border: 0px solid rgba(180, 180, 180, 0.71);
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
  display: none;
  background: rgba(230, 230, 230, 0.71);
  color: #000 !important;
  padding: 10px 7px;
  border: 0px solid rgba(130, 130, 130, 0.71);
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
}

.text.bottom.default:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.default:before {
  color: rgba(230, 230, 230, 0.71);
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

.text.bottom.default:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.success {
  display: none;
  background: #5CB85C;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #2a862a;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  min-width: 300px;
  left: 96px;
  top: -5px;
}

.text.success:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.success:before {
  position: absolute;
  left: -12px;
  color: #5CB85C;
}

.text.top.success {
  display: none;
  background: #5CB85C;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #2a862a;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: -36px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.top.success:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.top.success:before {
  color: #5CB85C;
  margin-left: 40px;
  position: absolute;
  bottom: -11px;
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.text.bottom.success {
  display: none;
  background: #5CB85C;
  color: #fff;
  padding: 10px 7px;
  border: 0px solid #2a862a;
  border-radius: 4px;
  -webkit-transition: all 1s ease-in;
  box-shadow: 4px 4px 12px rgba(211, 211, 211, 0.64);
  text-align: center;
  position: absolute;
  margin-top: 40px;
  min-width: 300px;
  margin-left: -94px;
  text-align: center;
  z-index: 1000;
}

.text.bottom.success:before {
  content: '\25C0';
  padding-right: 5px;
  color: rgba(230, 230, 230, 0.71);
}

.text.bottom.success:before {
  color: #5CB85C;
  margin-left: 40px;
  position: absolute;
  -webkit-transform: rotate(-90deg);
  transform: rotate(90deg);
  top: -12px;
}

ul.tab-selector {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  list-style-type: none;
  -webkit-box-flex: 1;
      -ms-flex: 1 100%;
          flex: 1 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
  background-color: #f1f1f1;
}

ul.tab-selector li {
  cursor: pointer;
  display: inline-block;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  transition: 0.3s;
  font-size: 17px;
  float: left;
}

ul.tab-selector li.active {
  background-color: rgba(221, 221, 221, 0.3);
}

ul.tab-selector li:hover {
  background-color: rgba(201, 201, 201, 0.3);
}

ul.tab-selector li:focus {
  background-color: #ccc;
}

.tab-content.with-border {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  border: 1px solid #ccc;
}

.tab-content div {
  display: none;
  padding: 6px 12px;
  border-top: none;
}

.tab-content div.active {
  display: block;
}

ul.tab-selector.vertical {
  -webkit-box-flex: 0;
      -ms-flex: none;
          flex: none;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  width: 20%;
}

.table {
  border: 1px solid lightgrey;
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
}

.table > tbody > tr > td,
.table > tbody > tr > th,
.table > tfoot > tr > td,
.table > tfoot > tr > th,
.table > thead > tr > td,
.table > thead > tr > th {
  padding: 8px 5px;
  line-height: 1.42857143;
  vertical-align: top;
}

.table tr {
  border: 1px solid #dadada;
}

.table.stripe tr:nth-child(even) {
  background: #d3d3d3;
}

tfoot,
thead {
  font-weight: bold;
  background: rgba(128, 128, 128, 0.16);
}

.text-center {
  text-align: center;
}

.center {
  margin: 0 auto;
}

.small {
  font-size: smaller;
}

.justify {
  text-align: justify;
}

p.right {
  float: right;
}

.hide {
  display: none;
}

.title {
  font-weight: bolder;
}

.info {
  color: #5BC0DE;
}

.dark {
  color: #123159;
}

.danger {
  color: #D9534F;
}

.warning {
  color: #F0AD4E;
}

.primary {
  color: #337AB7;
}

.default {
  color: rgba(230, 230, 230, 0.71);
}

.success {
  color: #5CB85C;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.5;
  font-weight: 400;
  margin: 0.625rem 0;
}

h1 {
  font-size: 2.25rem;
}

h2 {
  font-size: 1.875rem;
}

h3 {
  font-size: 1.5rem;
}

h4 {
  font-size: 1.25rem;
}

h5 {
  font-size: 1.125rem;
}

h6 {
  font-size: 1rem;
}

hr {
  margin: 1.3rem 0 !important;
}

.underline {
  text-decoration: underline;
}

.dot-underline {
  text-decoration: underline dotted;
}

.double-underline {
  text-decoration: underline double;
}

.dash-underline {
  text-decoration: underline dashed;
}

.wavy-underline {
  text-decoration: underline wavy;
}

.line-over {
  text-decoration: overline;
}

.line-through {
  text-decoration: line-through;
}

.italic {
  font-style: italic;
}

.oblique {
  font-style: oblique;
}

.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capital {
  text-transform: capitalize;
}

small {
  font-size: smaller;
}

blockquote {
  font-size: 18px;
  font-style: italic;
  width: 500px;
  margin: 0.25em 0;
  padding: 0.25em 40px;
  line-height: 1.45;
  position: relative;
  color: #383838;
}

blockquote::before {
  display: block;
  content: "\201C";
  font-size: 80px;
  position: absolute;
  left: -2px;
  top: -33px;
  color: #7a7a7a;
}

blockquote cite {
  color: #999999;
  font-size: 14px;
  display: block;
  margin-top: 5px;
}

blockquote cite::before {
  content: "\2014 \2009";
}

blockquote.with-border {
  border-left: 5px solid lightgrey;
  padding: 1.0625rem 2.0625rem;
}

blockquote.with-border::before {
  top: -19px;
}

.accordion button.target {
  cursor: pointer;
  padding: 18px 0;
  width: 100%;
  font-size: 15px;
  display: block;
}

.accordion button.target span {
  padding-left: 5px;
}

div.panel {
  padding: 0 18px;
  display: none;
}

div.panel.active {
  display: block;
  border: 1px solid #e2e2e2;
}

div.panel.hide {
  display: none;
}

nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}

nav .item li {
  float: left;
  padding: 0.375rem 0.1875rem;
  position: relative;
}

nav .item li a {
  padding: 0.875rem 0.625rem;
  text-align: center;
  font-size: 1rem;
}

nav .item li a button {
  margin-top: 0 !important;
}

nav .item li a:hover ~ .sub {
  display: block;
  z-index: 3;
}

nav .item li .sub {
  min-width: 9.0625rem;
  height: auto;
  position: absolute;
  top: 2.1875rem;
  left: 0;
  display: none;
}

nav .item li .sub:hover {
  display: block;
}

nav .item li .sub li {
  float: none;
  padding: 0;
  margin: 0;
}

nav .item li .sub li a {
  background: grey;
  display: block;
  padding: 0.3125rem;
  -webkit-transition: all .5s ease-out;
  border-bottom: 1px solid transparent;
  text-align: center;
}

nav .item li .sub li a:hover {
  background: lightgrey;
  color: #000;
  border-bottom: 0.0625rem solid #fff;
}

nav .item .logo {
  max-height: 5.625rem;
  max-width: 13.75rem;
  overflow: hidden;
  background: transparent;
}

@media screen and (max-width: 768px) {
  nav {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
        -ms-flex-direction: column !important;
            flex-direction: column !important;
    display: none;
    transition: all 0.5s ease-in;
  }

  nav .right {
    margin-left: 0 !important;
    display: inline;
    float: none !important;
  }

  nav .item {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
        -ms-flex-direction: column !important;
            flex-direction: column !important;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
    justify-content: center;
  }

  nav .item li:active ~ .sub {
    display: block;
  }

  .sub {
    position: absolute !important;
    top: 1.8125rem !important;
    left: -1.4375rem !important;
  }

  .icon {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end;
    padding: 0.4375rem;
    background: rgba(112, 128, 144, 0.18);
    box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
  }

  .icon span {
    font-size: 1.0625rem;
    padding-right: 0.25rem;
  }
}

@media screen and (min-width: 769px) {
  .icon {
    display: none !important;
  }
}

#switch {
  display: none;
}

#switch:checked ~ nav {
  display: block;
  position: relative;
}

.top-bar {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  background: rgba(206, 206, 206, 0.17);
  font-size: .85rem;
  padding: 5px 10px;
  box-shadow: 0px 3px 4px 2px rgba(211, 211, 211, 0.41);
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.top-bar .item {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  padding: 0 10px;
}

.top-bar .right {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end;
}

.top-bar a {
  padding: 0 5px;
}

.pricing-table {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: "center";
      -ms-flex-pack: "center";
          justify-content: "center";
  -webkit-box-align: "center";
      -ms-flex-align: "center";
          align-items: "center";
  -ms-flex-wrap: "wrap";
      flex-wrap: "wrap";
  margin: 9px 0px;
}

.pricing-table .plan {
  margin: 8px 8px;
  font: 12px Lucida Sans, trebuchet MS, Arial, Helvetica;
  text-shadow: 0 1px rgba(255, 255, 255, 0.8);
  border: 1px solid #d6d6d6;
  color: #123159;
  text-align: center;
  padding: 20px;
  width: 180px;
  float: left;
  position: relative;
  border-radius: 5px;
}

.pricing-table .plan h3 {
  border-radius: 5px 0 0 0;
}

.pricing-table .plan button {
  display: inline;
}

.pricing-table h3 {
  font-size: 26px;
  font-weight: normal;
  padding: 20px;
  margin: -20px -20px 50px -20px;
  background-color: #d4cfcf;
  background-image: linear-gradient(#fff, #d4cfcf);
}

.pricing-table h3 span {
  display: block;
  font: bold 25px/100px Georgia, Serif;
  color: #777;
  background: #fff;
  border: 5px solid #fff;
  height: 100px;
  width: 100px;
  margin: 10px auto -65px;
  border-radius: 100px;
  box-shadow: 0 5px 20px #ddd inset, 0 3px 0 #999 inset;
}

.pricing-table ul {
  margin: 20px 0 0;
  padding: 0;
  list-style: none;
}

.pricing-table ul li {
  border-top: 1px solid #ddd;
  padding: 10px 0;
}

.plan.bg-primary,
.bg-success,
.bg-info,
.bg-danger,
.bg-warning,
.bg-dark {
  color: #fff !important;
}

.plan.bg-primary h3,
.bg-success h3,
.bg-info h3,
.bg-danger h3,
.bg-warning h3,
.bg-dark h3 {
  color: #636363;
}

.plan.bg-primary button,
.bg-success button,
.bg-info button,
.bg-danger button,
.bg-warning button,
.bg-dark button {
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

ul.tab-selector {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  list-style-type: none;
  -webkit-box-flex: 1;
      -ms-flex: 1 100%;
          flex: 1 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
  background-color: #f1f1f1;
}

ul.tab-selector li {
  cursor: pointer;
  display: inline-block;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  transition: 0.3s;
  font-size: 17px;
  float: left;
}

ul.tab-selector li.active {
  background-color: rgba(221, 221, 221, 0.3);
}

ul.tab-selector li:hover {
  background-color: rgba(201, 201, 201, 0.3);
}

ul.tab-selector li:focus {
  background-color: #ccc;
}

.tab-content.with-border {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  border: 1px solid #ccc;
}

.tab-content div {
  display: none;
  padding: 6px 12px;
  border-top: none;
}

.tab-content div.active {
  display: block;
}

ul.tab-selector.vertical {
  -webkit-box-flex: 0;
      -ms-flex: none;
          flex: none;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  width: 20%;
}

.wrapper {
  margin: 20px auto;
}

.container {
  margin: 20px auto;
}

[class*="col-"] {
  padding: 0.625rem;
}

@media all and (max-width: 500px) {
  [class*="col-"] {
    width: 97%;
    margin: 0 auto;
  }

  .innerGap {
    padding: 0 !important;
  }

  .divider-in-layout {
    box-shadow: none !important;
  }

  .home-grid-resent {
    width: 94% !important;
    padding: 10px 9px !important;
  }
}

@media all and (min-width: 500px) {
  [class*="col-"]:last-child {
    margin-right: 0;
  }

  .col-1 {
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
  }

  .col-2 {
    -webkit-box-flex: 2;
        -ms-flex: 2;
            flex: 2;
  }

  .col-3 {
    -webkit-box-flex: 3;
        -ms-flex: 3;
            flex: 3;
  }

  .col-4 {
    -webkit-box-flex: 4;
        -ms-flex: 4;
            flex: 4;
  }

  .col-5 {
    -webkit-box-flex: 5;
        -ms-flex: 5;
            flex: 5;
  }

  .col-6 {
    -webkit-box-flex: 6;
        -ms-flex: 6;
            flex: 6;
  }

  .col-7 {
    -webkit-box-flex: 7;
        -ms-flex: 7;
            flex: 7;
  }

  .col-8 {
    -webkit-box-flex: 8;
        -ms-flex: 8;
            flex: 8;
  }

  .col-9 {
    -webkit-box-flex: 9;
        -ms-flex: 9;
            flex: 9;
  }

  .col-10 {
    -webkit-box-flex: 10;
        -ms-flex: 10;
            flex: 10;
  }

  .col-11 {
    -webkit-box-flex: 11;
        -ms-flex: 11;
            flex: 11;
  }

  .col-12 {
    -webkit-box-flex: 12;
        -ms-flex: 12;
            flex: 12;
  }
}

@media all and (min-width: 1000px) {
  .wrapper {
    max-width: 1000px;
  }
}

@media all and (max-width: 768px) {
  .container-full,
  .container {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
  }

  .container-full .row,
  .container .row {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
  }

  .container-full .row .footer-item ul,
  .container-full .row .footer-item p,
  .container .row .footer-item ul,
  .container .row .footer-item p {
    text-align: center;
  }
}

.space-left {
  margin-left: 15px;
}

.space-right {
  margin-right: 15px;
}

footer {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  margin: 0;
  padding: 0.9375rem 0.9375rem;
  border: none;
  background: transparent;
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

footer .footer-item {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

footer .footer-item p {
  font-size: 23px;
  font-weight: 500;
  border-bottom: 0.0625rem solid;
  padding-bottom: 0.0625rem;
}

footer .footer-item ul {
  margin-top: 0.3125rem;
  margin-left: 0.3125rem;
}

footer .footer-item ul li {
  padding: 0.125rem 0rem;
}

@media only screen and (max-width: 768px) {
  footer {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
    -webkit-box-align: center !important;
        -ms-flex-align: center !important;
            align-items: center !important;
  }

  footer .footer-item {
    margin-bottom: 40px;
  }
}

.loading {
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}

.loading.infinite {
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}

@-webkit-keyframes bounce {
  from, 20%, 53%, 80%, to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  40%, 43% {
    -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    -webkit-transform: translate3d(0, -30px, 0);
    transform: translate3d(0, -30px, 0);
  }

  70% {
    -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    -webkit-transform: translate3d(0, -15px, 0);
    transform: translate3d(0, -15px, 0);
  }

  90% {
    -webkit-transform: translate3d(0, -4px, 0);
    transform: translate3d(0, -4px, 0);
  }
}

.bounce {
  -webkit-animation-name: bounce;
  animation-name: bounce;
  -webkit-transform-origin: center bottom;
  transform-origin: center bottom;
}

@-webkit-keyframes flash {
  from, 50%, to {
    opacity: 1;
  }

  25%, 75% {
    opacity: 0;
  }
}

@keyframes flash {
  from, 50%, to {
    opacity: 1;
  }

  25%, 75% {
    opacity: 0;
  }
}

.flash {
  -webkit-animation-name: flash;
  animation-name: flash;
}

@-webkit-keyframes pulse {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  50% {
    -webkit-transform: scale3d(1.05, 1.05, 1.05);
    transform: scale3d(1.05, 1.05, 1.05);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}

@keyframes pulse {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  50% {
    -webkit-transform: scale3d(1.05, 1.05, 1.05);
    transform: scale3d(1.05, 1.05, 1.05);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}

.pulse {
  -webkit-animation-name: pulse;
  animation-name: pulse;
}

@-webkit-keyframes rubberBand {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  30% {
    -webkit-transform: scale3d(1.25, 0.75, 1);
    transform: scale3d(1.25, 0.75, 1);
  }

  40% {
    -webkit-transform: scale3d(0.75, 1.25, 1);
    transform: scale3d(0.75, 1.25, 1);
  }

  50% {
    -webkit-transform: scale3d(1.15, 0.85, 1);
    transform: scale3d(1.15, 0.85, 1);
  }

  65% {
    -webkit-transform: scale3d(0.95, 1.05, 1);
    transform: scale3d(0.95, 1.05, 1);
  }

  75% {
    -webkit-transform: scale3d(1.05, 0.95, 1);
    transform: scale3d(1.05, 0.95, 1);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}

@keyframes rubberBand {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  30% {
    -webkit-transform: scale3d(1.25, 0.75, 1);
    transform: scale3d(1.25, 0.75, 1);
  }

  40% {
    -webkit-transform: scale3d(0.75, 1.25, 1);
    transform: scale3d(0.75, 1.25, 1);
  }

  50% {
    -webkit-transform: scale3d(1.15, 0.85, 1);
    transform: scale3d(1.15, 0.85, 1);
  }

  65% {
    -webkit-transform: scale3d(0.95, 1.05, 1);
    transform: scale3d(0.95, 1.05, 1);
  }

  75% {
    -webkit-transform: scale3d(1.05, 0.95, 1);
    transform: scale3d(1.05, 0.95, 1);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}

.rubberBand {
  -webkit-animation-name: rubberBand;
  animation-name: rubberBand;
}

@-webkit-keyframes shake {
  from, to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  10%, 30%, 50%, 70%, 90% {
    -webkit-transform: translate3d(-10px, 0, 0);
    transform: translate3d(-10px, 0, 0);
  }

  20%, 40%, 60%, 80% {
    -webkit-transform: translate3d(10px, 0, 0);
    transform: translate3d(10px, 0, 0);
  }
}

@keyframes shake {
  from, to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  10%, 30%, 50%, 70%, 90% {
    -webkit-transform: translate3d(-10px, 0, 0);
    transform: translate3d(-10px, 0, 0);
  }

  20%, 40%, 60%, 80% {
    -webkit-transform: translate3d(10px, 0, 0);
    transform: translate3d(10px, 0, 0);
  }
}

.shake {
  -webkit-animation-name: shake;
  animation-name: shake;
}

@-webkit-keyframes swing {
  20% {
    -webkit-transform: rotate3d(0, 0, 1, 15deg);
    transform: rotate3d(0, 0, 1, 15deg);
  }

  40% {
    -webkit-transform: rotate3d(0, 0, 1, -10deg);
    transform: rotate3d(0, 0, 1, -10deg);
  }

  60% {
    -webkit-transform: rotate3d(0, 0, 1, 5deg);
    transform: rotate3d(0, 0, 1, 5deg);
  }

  80% {
    -webkit-transform: rotate3d(0, 0, 1, -5deg);
    transform: rotate3d(0, 0, 1, -5deg);
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 0deg);
    transform: rotate3d(0, 0, 1, 0deg);
  }
}

@keyframes swing {
  20% {
    -webkit-transform: rotate3d(0, 0, 1, 15deg);
    transform: rotate3d(0, 0, 1, 15deg);
  }

  40% {
    -webkit-transform: rotate3d(0, 0, 1, -10deg);
    transform: rotate3d(0, 0, 1, -10deg);
  }

  60% {
    -webkit-transform: rotate3d(0, 0, 1, 5deg);
    transform: rotate3d(0, 0, 1, 5deg);
  }

  80% {
    -webkit-transform: rotate3d(0, 0, 1, -5deg);
    transform: rotate3d(0, 0, 1, -5deg);
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 0deg);
    transform: rotate3d(0, 0, 1, 0deg);
  }
}

.swing {
  -webkit-transform-origin: top center;
  transform-origin: top center;
  -webkit-animation-name: swing;
  animation-name: swing;
}

.newspaper-col-1 {
  min-height: 0.3125rem;
  background: #dedede;
  -webkit-column-count: 3;
     -moz-column-count: 3;
          column-count: 3;
  padding: 0.625rem;
  -webkit-column-gap: 30px;
     -moz-column-gap: 30px;
          column-gap: 30px;
  -webkit-column-count: 1;
     -moz-column-count: 1;
          column-count: 1;
}

.newspaper-col-2 {
  min-height: 0.3125rem;
  background: #dedede;
  -webkit-column-count: 3;
     -moz-column-count: 3;
          column-count: 3;
  padding: 0.625rem;
  -webkit-column-gap: 30px;
     -moz-column-gap: 30px;
          column-gap: 30px;
  -webkit-column-count: 2;
     -moz-column-count: 2;
          column-count: 2;
}

.newspaper-col-3 {
  min-height: 0.3125rem;
  background: #dedede;
  -webkit-column-count: 3;
     -moz-column-count: 3;
          column-count: 3;
  padding: 0.625rem;
  -webkit-column-gap: 30px;
     -moz-column-gap: 30px;
          column-gap: 30px;
  column-count: 3;
}

.newspaper-col-4 {
  min-height: 0.3125rem;
  background: #dedede;
  -webkit-column-count: 3;
     -moz-column-count: 3;
          column-count: 3;
  padding: 0.625rem;
  -webkit-column-gap: 30px;
     -moz-column-gap: 30px;
          column-gap: 30px;
  -webkit-column-count: 4;
     -moz-column-count: 4;
          column-count: 4;
}

.newspaper-col-5 {
  min-height: 0.3125rem;
  background: #dedede;
  -webkit-column-count: 3;
     -moz-column-count: 3;
          column-count: 3;
  padding: 0.625rem;
  -webkit-column-gap: 30px;
     -moz-column-gap: 30px;
          column-gap: 30px;
  -webkit-column-count: 5;
     -moz-column-count: 5;
          column-count: 5;
}

.newspaper-col-6 {
  min-height: 0.3125rem;
  background: #dedede;
  -webkit-column-count: 3;
     -moz-column-count: 3;
          column-count: 3;
  padding: 0.625rem;
  -webkit-column-gap: 30px;
     -moz-column-gap: 30px;
          column-gap: 30px;
  -webkit-column-count: 6;
     -moz-column-count: 6;
          column-count: 6;
}

.full-screen {
  padding: 0 !important;
}

.hd {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

.sd {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

triangle-up {
  display: inline-block;
  height: 0;
  width: 0;
  border-left: 150px solid transparent;
  border-right: 150px solid transparent;
  border-bottom: 150px solid teal;
}

triangle-down {
  display: inline-block;
  height: 0;
  width: 0;
  border-left: 150px solid transparent;
  border-right: 150px solid transparent;
  border-top: 150px solid teal;
}

triangle-right {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 150px solid transparent;
  border-left: 150px solid teal;
  border-bottom: 150px solid transparent;
}

triangle-left {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 150px solid transparent;
  border-right: 150px solid teal;
  border-bottom: 150px solid transparent;
}

triangle-top-left {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 250px solid teal;
  border-right: 250px solid transparent;
}

triangle-top-right {
  display: inline-block;
  height: 0;
  width: 0;
  border-bottom: 250px solid transparent;
  border-right: 250px solid teal;
}

triangle-bottom-right {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 250px solid transparent;
  border-right: 250px solid teal;
}

triangle-bottom-left {
  display: inline-block;
  height: 0;
  width: 0;
  border-top: 250px solid transparent;
  border-left: 250px solid teal;
}

triangle {
  display: inline-block;
  height: 0;
  width: 0;
  border-left: 250px solid transparent;
  border-right: 250px solid transparent;
  border-bottom: 250px solid teal;
}

circle {
  display: inline-block;
  width: 200px;
  height: 200px;
  background: #5BC0DE;
  line-height: 200px;
  vertical-align: middle;
  text-align: center;
  font-size: 40px;
  border-radius: 100px;
  border: 2px solid #337AB7;
  transition: all 0.1s ease-in-out;
}

.circle {
  display: inline-block;
  width: 200px;
  height: 200px;
  background: #5BC0DE;
  line-height: 200px;
  vertical-align: middle;
  text-align: center;
  font-size: 40px;
  border-radius: 100px;
  border: 2px solid #337AB7;
  transition: all 0.1s ease-in-out;
}

.circle i {
  font-size: 1.3125rem;
}

oval {
  height: 150;
  width: 300;
  border-radius: 100%;
  display: inline-block;
  background: teal;
  text-align: center;
  line-height: 147px;
  font-size: 40px;
}

button.circle {
  outline: none;
  width: 70px;
  height: 70px;
  background: rgba(230, 230, 230, 0.71);
  line-height: 0;
  text-align: center;
  border-radius: 35px;
  font-size: 11px;
  display: inline-block !important;
}

square {
  display: inline-block;
  height: 150px;
  width: 150px;
  background: teal;
  line-height: 150px;
  vertical-align: middle;
  text-align: center;
  font-size: 15px;
  border: 1px solid pink;
}

parallelogram {
  display: inline-block;
  height: 150px;
  width: 100px;
  background: teal;
  line-height: 150px;
  vertical-align: middle;
  text-align: center;
  font-size: 15px;
  border: 1px solid pink;
  -webkit-transform: skew(20deg);
  transform: skew(20deg);
}

rectangle {
  display: inline-block;
  height: 100px;
  width: 150px;
  background: teal;
  line-height: 100px;
  vertical-align: middle;
  text-align: center;
  font-size: 15px;
  border: 1px solid pink;
}

.toggle {
  position: relative;
  display: inline-block;
  width: 59px;
  height: 20px;
}

.toggle input[type=checkbox] {
  display: none;
}

.toggle input[type=checkbox]:checked + .switch::before {
  left: 2.3125rem;
  background: #f8f8f8;
}

.toggle .switch,
.toggle .switch.square {
  border-radius: 2.3125rem;
  position: absolute;
  cursor: pointer;
  top: -0.1875rem;
  left: 0.0625rem;
  right: 0;
  bottom: 0.375rem;
  transition: 0.4s;
  transition: .4s;
}

.toggle .switch:before,
.toggle .switch.square:before {
  border-radius: 50%;
  position: absolute;
  content: '';
  height: 1.8125rem;
  width: 1.8125rem;
  left: -0.0625rem;
  bottom: -0.1875rem;
  transition: 0.4s;
  transition: .4s;
  box-shadow: 0 0 1px #353333;
  background: #e4e4e4;
  border: 0.09375rem solid rgba(105, 105, 105, 0.18);
}

.toggle .square.switch {
  border-radius: 0.125rem;
}

.toggle .square.switch:before {
  border-radius: 0rem;
  height: 1.6875rem;
  width: 1.625rem;
  border: 0.0625rem solid rgba(105, 105, 105, 0.18);
}

input[type=checkbox]:checked + .switch.bg-info::before,
.toggle input[type=checkbox]:checked + .bg-info.switch.square::before {
  background: #5BC0DE;
}

input[type=checkbox]:checked + .switch.bg-dark::before,
.toggle input[type=checkbox]:checked + .bg-dark.switch.square::before {
  background: #123159;
}

input[type=checkbox]:checked + .switch.bg-danger::before,
.toggle input[type=checkbox]:checked + .bg-danger.switch.square::before {
  background: #D9534F;
}

input[type=checkbox]:checked + .switch.bg-warning::before,
.toggle input[type=checkbox]:checked + .bg-warning.switch.square::before {
  background: #F0AD4E;
}

input[type=checkbox]:checked + .switch.bg-primary::before,
.toggle input[type=checkbox]:checked + .bg-primary.switch.square::before {
  background: #337AB7;
}

input[type=checkbox]:checked + .switch.bg-default::before,
.toggle input[type=checkbox]:checked + .bg-default.switch.square::before {
  background: rgba(230, 230, 230, 0.71);
}

input[type=checkbox]:checked + .switch.bg-success::before,
.toggle input[type=checkbox]:checked + .bg-success.switch.square::before {
  background: #5CB85C;
}

img .center {
  margin: 0 auto;
}

.img-responsive,
.img-bordered,
.img-circle {
  border-radius: 0.1875rem;
  display: block;
  max-width: 100%;
  height: auto;
}

.img-bordered,
.img-circle {
  border: 3px solid #cacaca;
}

.img-circle {
  border-radius: 50%;
}

.innerGap {
  padding: 10px;
}

.space-between {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.display-flex {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.align-items-center {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.justify-content-center {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

.space-around {
  -ms-flex-pack: distribute;
      justify-content: space-around;
}

.justify-content-end {
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end;
}

.space-between {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.right-gap {
  margin-right: 5px;
}

.left-gap {
  margin-left: 5px;
}

.text-center {
  text-align: center;
}

/* All the color loop must be placed in here
// to minimize code complexities and weight
// of this framework */

footer.bg-info li a,
nav.bg-info li a,
ul.bg-info li a {
  color: #fff !important;
}

.card.info,
.alert.info,
.bg-info {
  background: -owg-#5BC0DE !important;
  background: -webkit-#5BC0DE !important;
  background: -moz-#5BC0DE !important;
  background: -o-#5BC0DE !important;
  background: #5BC0DE !important;
  color: #fff !important;
}

.top-bar.bg-info,
.bg-info.copyright {
  background: -owg-#47acca !important;
  background: -webkit-#47acca !important;
  background: -moz-#47acca !important;
  background: -o-#47acca !important;
  background: #47acca !important;
  color: #fff !important;
}

footer.bg-dark li a,
nav.bg-dark li a,
ul.bg-dark li a {
  color: #fff !important;
}

.card.dark,
.alert.dark,
.bg-dark {
  background: -owg-#123159 !important;
  background: -webkit-#123159 !important;
  background: -moz-#123159 !important;
  background: -o-#123159 !important;
  background: #123159 !important;
  color: #fff !important;
}

.top-bar.bg-dark,
.bg-dark.copyright {
  background: -owg-#001d45 !important;
  background: -webkit-#001d45 !important;
  background: -moz-#001d45 !important;
  background: -o-#001d45 !important;
  background: #001d45 !important;
  color: #fff !important;
}

footer.bg-danger li a,
nav.bg-danger li a,
ul.bg-danger li a {
  color: #fff !important;
}

.card.danger,
.alert.danger,
.bg-danger {
  background: -owg-#D9534F !important;
  background: -webkit-#D9534F !important;
  background: -moz-#D9534F !important;
  background: -o-#D9534F !important;
  background: #D9534F !important;
  color: #fff !important;
}

.top-bar.bg-danger,
.bg-danger.copyright {
  background: -owg-#c53f3b !important;
  background: -webkit-#c53f3b !important;
  background: -moz-#c53f3b !important;
  background: -o-#c53f3b !important;
  background: #c53f3b !important;
  color: #fff !important;
}

footer.bg-warning li a,
nav.bg-warning li a,
ul.bg-warning li a {
  color: #fff !important;
}

.card.warning,
.alert.warning,
.bg-warning {
  background: -owg-#F0AD4E !important;
  background: -webkit-#F0AD4E !important;
  background: -moz-#F0AD4E !important;
  background: -o-#F0AD4E !important;
  background: #F0AD4E !important;
  color: #fff !important;
}

.top-bar.bg-warning,
.bg-warning.copyright {
  background: -owg-#dc993a !important;
  background: -webkit-#dc993a !important;
  background: -moz-#dc993a !important;
  background: -o-#dc993a !important;
  background: #dc993a !important;
  color: #fff !important;
}

footer.bg-primary li a,
nav.bg-primary li a,
ul.bg-primary li a {
  color: #fff !important;
}

.card.primary,
.alert.primary,
.bg-primary {
  background: -owg-#337AB7 !important;
  background: -webkit-#337AB7 !important;
  background: -moz-#337AB7 !important;
  background: -o-#337AB7 !important;
  background: #337AB7 !important;
  color: #fff !important;
}

.top-bar.bg-primary,
.bg-primary.copyright {
  background: -owg-#1f66a3 !important;
  background: -webkit-#1f66a3 !important;
  background: -moz-#1f66a3 !important;
  background: -o-#1f66a3 !important;
  background: #1f66a3 !important;
  color: #fff !important;
}

footer.bg-default li a,
nav.bg-default li a,
ul.bg-default li a {
  color: #123159 !important;
}

.card.default,
.alert.default,
.bg-default {
  background: -owg-rgba(230, 230, 230, 0.71) !important;
  background: -webkit-rgba(230, 230, 230, 0.71) !important;
  background: -moz-rgba(230, 230, 230, 0.71) !important;
  background: -o-rgba(230, 230, 230, 0.71) !important;
  background: rgba(230, 230, 230, 0.71) !important;
  color: #123159 !important;
}

.top-bar.bg-default,
.bg-default.copyright {
  background: -owg-rgba(210, 210, 210, 0.71) !important;
  background: -webkit-rgba(210, 210, 210, 0.71) !important;
  background: -moz-rgba(210, 210, 210, 0.71) !important;
  background: -o-rgba(210, 210, 210, 0.71) !important;
  background: rgba(210, 210, 210, 0.71) !important;
  color: #123159 !important;
}

footer.bg-success li a,
nav.bg-success li a,
ul.bg-success li a {
  color: #fff !important;
}

.card.success,
.alert.success,
.bg-success {
  background: -owg-#5CB85C !important;
  background: -webkit-#5CB85C !important;
  background: -moz-#5CB85C !important;
  background: -o-#5CB85C !important;
  background: #5CB85C !important;
  color: #fff !important;
}

.top-bar.bg-success,
.bg-success.copyright {
  background: -owg-#48a448 !important;
  background: -webkit-#48a448 !important;
  background: -moz-#48a448 !important;
  background: -o-#48a448 !important;
  background: #48a448 !important;
  color: #fff !important;
}

.gutter {
  margin-top: 20px;
}

.right {
  margin-left: auto !important;
  display: inline;
  float: right;
}

.caret {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 2px;
  vertical-align: middle;
  border-top: 4px dashed;
  border-top: 4px solid\9;
  border-right: 4px solid transparent;
  border-left: 4px solid transparent;
}

.no-shadow {
  box-shadow: none !important;
}

.text-justify {
  text-align: justify;
}

.full-width {
  -webkit-box-flex: 1;
      -ms-flex: 1 100%;
          flex: 1 100%;
}

.flex-column {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.clearfix {
  *zoom: 1;
}

.clearfix:before,
.clearfix:after {
  display: table;
  content: '';
  line-height: 0;
}

.clearfix:after {
  clear: both;
}

.break {
  -ms-flex-preferred-size: 100%;
      flex-basis: 100%;
  width: 0px;
  height: 0px;
  overflow: hidden;
}

.custom_column_style {
  box-shadow: 0 0 1px #c5c5c5;
}

.no-margin {
  margin-top: -1.5rem;
}

.gap,
.griding {
  margin-bottom: 1.25rem;
  min-height: 1.875rem;
  margin-right: 0.3125rem;
  box-shadow: 2px 5px 9px rgba(0, 0, 0, 0.27);
}

.markup-pre-button {
  color: rgba(64, 64, 64, 0.74);
}

.with-border {
  border: 1px solid #dedede;
}

.with-shadow {
  box-shadow: 1px 1px 4px 2px rgba(211, 211, 211, 0.41);
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */